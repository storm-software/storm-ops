diff --git a/dist/chunk-TWFEYLU4.js b/dist/chunk-TWFEYLU4.js
index 811e92e4d4b6adf6a3d0b3c8f97661f802d5e55b..dc5e715ea1b7574c7740b9b0df5e46efde72492e 100644
--- a/dist/chunk-TWFEYLU4.js
+++ b/dist/chunk-TWFEYLU4.js
@@ -204,8 +204,8 @@ function defaultOutExtension({
     dts: dtsExtension
   };
 }
-function ensureTempDeclarationDir() {
-  const cwd = process.cwd();
+function ensureTempDeclarationDir(options) {
+  const cwd = options.workspaceConfig?.workspaceRoot || process.cwd();
   const dirPath = _path2.default.join(cwd, ".tsup", "declaration");
   if (_fs2.default.existsSync(dirPath)) {
     return dirPath;
diff --git a/dist/chunk-VGC3FXLU.js b/dist/chunk-VGC3FXLU.js
index ef2599c4f04d34227a73b405e1170045d9a5bca0..960a9ccc8405173be3f1db19b2299fb895f1ba06 100644
--- a/dist/chunk-VGC3FXLU.js
+++ b/dist/chunk-VGC3FXLU.js
@@ -8,13 +8,13 @@ var _path = require('path'); var _path2 = _interopRequireDefault(_path);
 var _joycon = require('joycon'); var _joycon2 = _interopRequireDefault(_joycon);
 var _bundlerequire = require('bundle-require');
 var joycon = new (0, _joycon2.default)();
-var loadJson = async (filepath) => {
+var loadJson = async (filepath, options) => {
   try {
     return _chunkTWFEYLU4js.jsoncParse.call(void 0, await _fs2.default.promises.readFile(filepath, "utf8"));
   } catch (error) {
     if (error instanceof Error) {
       throw new Error(
-        `Failed to parse ${_path2.default.relative(process.cwd(), filepath)}: ${error.message}`
+        `Failed to parse ${_path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), filepath)}: ${error.message}`
       );
     } else {
       throw error;
diff --git a/dist/commonjs-plugin.js b/dist/commonjs-plugin.js
new file mode 100644
index 0000000000000000000000000000000000000000..b9b6d1874b791208e2b3ca6f3a03d27b7980f7f7
--- /dev/null
+++ b/dist/commonjs-plugin.js
@@ -0,0 +1,347 @@
+"use strict";
+var __create = Object.create;
+var __defProp = Object.defineProperty;
+var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+var __getOwnPropNames = Object.getOwnPropertyNames;
+var __getProtoOf = Object.getPrototypeOf;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __copyProps = (to, from, except, desc) => {
+  if (from && typeof from === "object" || typeof from === "function") {
+    for (let key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+  }
+  return to;
+};
+var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
+  // If the importer is in node compatibility mode or this is not an ESM
+  // file that has been converted to a CommonJS file using a Babel-
+  // compatible transform (i.e. "__esModule" has not been set), then set
+  // "default" to the CommonJS "module.exports" for node compatibility.
+  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
+  mod
+));
+var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+
+// index.ts
+var index_exports = {};
+__export(index_exports, {
+  commonjs: () => commonjs,
+  default: () => index_default
+});
+module.exports = __toCommonJS(index_exports);
+var import_fs = require("fs");
+
+// lexer.ts
+function isNewLine(code) {
+  return code === 10 || code === 13 || code === 8232 || code === 8233;
+}
+function codePointToString(ch) {
+  if (ch <= 65535) return String.fromCharCode(ch);
+  ch -= 65536;
+  return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
+}
+var Lexer = class {
+  input = "";
+  pos = 0;
+  readString(input, pos) {
+    if (pos >= input.length) return null;
+    this.input = input;
+    this.pos = pos;
+    const quote = this.input.charCodeAt(pos);
+    if (!(quote === 34 || quote === 39)) return null;
+    let out = "";
+    let chunkStart = ++this.pos;
+    while (true) {
+      if (this.pos >= this.input.length) return null;
+      let ch = this.input.charCodeAt(this.pos);
+      if (ch === quote) break;
+      if (ch === 92) {
+        out += this.input.slice(chunkStart, this.pos);
+        const escaped = this.readEscapedChar();
+        if (escaped === null) return null;
+        out += escaped;
+        chunkStart = this.pos;
+      } else {
+        if (isNewLine(ch)) return null;
+        ++this.pos;
+      }
+    }
+    out += this.input.slice(chunkStart, this.pos++);
+    return out;
+  }
+  readEscapedChar() {
+    let ch = this.input.charCodeAt(++this.pos);
+    let code;
+    ++this.pos;
+    switch (ch) {
+      case 110:
+        return "\n";
+      case 114:
+        return "\r";
+      case 120:
+        code = this.readHexChar(2);
+        if (code === null) return null;
+        return String.fromCharCode(code);
+      case 117:
+        code = this.readCodePoint();
+        if (code === null) return null;
+        return codePointToString(code);
+      case 116:
+        return "	";
+      case 98:
+        return "\b";
+      case 118:
+        return "\v";
+      case 102:
+        return "\f";
+      case 13:
+        if (this.input.charCodeAt(this.pos) === 10) {
+          ++this.pos;
+        }
+      case 10:
+        return "";
+      case 56:
+      case 57:
+        return null;
+      default:
+        if (ch >= 48 && ch <= 55) {
+          let match = this.input.slice(this.pos - 1, this.pos + 2).match(/^[0-7]+/);
+          if (match === null) return null;
+          let octalStr = match[0];
+          let octal = parseInt(octalStr, 8);
+          if (octal > 255) {
+            octalStr = octalStr.slice(0, -1);
+            octal = parseInt(octalStr, 8);
+          }
+          this.pos += octalStr.length - 1;
+          ch = this.input.charCodeAt(this.pos);
+          if (octalStr !== "0" || ch === 56 || ch === 57) return null;
+          return String.fromCharCode(octal);
+        }
+        if (isNewLine(ch)) return "";
+        return String.fromCharCode(ch);
+    }
+  }
+  readInt(radix, len) {
+    let start = this.pos;
+    let total = 0;
+    for (let i = 0; i < len; ++i, ++this.pos) {
+      let code = this.input.charCodeAt(this.pos);
+      let val;
+      if (code >= 97) {
+        val = code - 97 + 10;
+      } else if (code >= 65) {
+        val = code - 65 + 10;
+      } else if (code >= 48 && code <= 57) {
+        val = code - 48;
+      } else {
+        val = Infinity;
+      }
+      if (val >= radix) break;
+      total = total * radix + val;
+    }
+    if (this.pos === start || len != null && this.pos - start !== len) return null;
+    return total;
+  }
+  readHexChar(len) {
+    return this.readInt(16, len);
+  }
+  readCodePoint() {
+    let ch = this.input.charCodeAt(this.pos);
+    let code;
+    if (ch === 123) {
+      ++this.pos;
+      code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
+      ++this.pos;
+      if (code && code > 1114111) return null;
+    } else {
+      code = this.readHexChar(4);
+    }
+    return code;
+  }
+};
+
+// utils.ts
+function orderedUniq(array) {
+  let ret = [], visited = /* @__PURE__ */ new Set();
+  for (let val of array) if (!visited.has(val)) visited.add(val), ret.push(val);
+  return ret;
+}
+function cachedReduce(array, reducer, s) {
+  let cache = [s], cacheLen = 1, last = s;
+  return (len) => {
+    while (cacheLen <= len) cacheLen = cache.push(last = reducer(last, array[cacheLen - 1]));
+    return cache[len];
+  };
+}
+var reservedWords = "break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public";
+var builtin = "arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl";
+var forbiddenIdentifiers = new Set(`${reservedWords} ${builtin}`.split(" "));
+forbiddenIdentifiers.add("");
+var makeLegalIdentifier = function makeLegalIdentifier2(str) {
+  let identifier = str.replace(/-(\w)/g, (_, letter) => letter.toUpperCase()).replace(/[^$_a-zA-Z0-9]/g, "_");
+  if (/\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {
+    identifier = `_${identifier}`;
+  }
+  return identifier || "_";
+};
+function prepend(code, prefix) {
+  if (code.startsWith("#!")) {
+    const i = code.indexOf("\n") + 1;
+    return code.slice(0, i) + prefix + code.slice(i);
+  }
+  return prefix + code;
+}
+
+// index.ts
+function commonjs({
+  filter = /\.c?js$/,
+  transform = false,
+  transformConfig,
+  requireReturnsDefault = false,
+  ignore
+} = {}) {
+  const init_cjs_module_lexer = transform ? import("cjs-module-lexer") : void 0;
+  const use_default_export = typeof requireReturnsDefault === "function" ? requireReturnsDefault : (_path) => requireReturnsDefault;
+  const is_ignored = typeof ignore === "function" ? ignore : Array.isArray(ignore) ? (path) => ignore.includes(path) : () => false;
+  return {
+    name: "commonjs",
+    setup({ onLoad, esbuild }) {
+      let esbuild_shim;
+      const require_esbuild = () => esbuild || (esbuild_shim || (esbuild_shim = require("esbuild")));
+      const read = import_fs.promises.readFile;
+      const lexer = new Lexer();
+      onLoad({ filter }, async (args) => {
+        let parseCJS;
+        if (init_cjs_module_lexer) {
+          const { init, parse } = await init_cjs_module_lexer;
+          await init();
+          parseCJS = parse;
+        }
+        let contents;
+        try {
+          contents = await read(args.path, "utf8");
+        } catch {
+          return null;
+        }
+        const willTransform = transform === true || typeof transform === "function" && transform(args.path);
+        let cjsExports;
+        if (parseCJS && willTransform) {
+          let sourcemapIndex = contents.lastIndexOf("//# sourceMappingURL=");
+          let sourcemap;
+          if (sourcemapIndex !== -1) {
+            sourcemap = contents.slice(sourcemapIndex);
+            let sourcemapEnd = sourcemap.indexOf("\n");
+            if (sourcemapEnd !== -1 && sourcemap.slice(sourcemapEnd + 1).trimStart().length > 0) {
+              sourcemap = void 0;
+            } else {
+              contents = contents.slice(0, sourcemapIndex);
+            }
+          }
+          cjsExports = parseCJS(contents);
+          let { behavior, exports: exports2, sideEffects } = typeof willTransform === "object" ? willTransform : {};
+          behavior ?? (behavior = (transformConfig == null ? void 0 : transformConfig.behavior) ?? "node");
+          exports2 = orderedUniq(cjsExports.exports.concat(exports2 ?? []));
+          sideEffects ?? (sideEffects = (transformConfig == null ? void 0 : transformConfig.sideEffects) ?? true);
+          let exportDefault = behavior === "node" ? "export default exports;" : "export default exports.__esModule ? exports.default : exports;";
+          let exportsMap = exports2.map((e) => [e, makeLegalIdentifier(e)]);
+          if (exportsMap.some(([e]) => e === "default")) {
+            if (behavior === "node") {
+              exportsMap = exportsMap.filter(([e]) => e !== "default");
+            } else {
+              exportDefault = "";
+            }
+          }
+          let reexports = cjsExports.reexports.map((e) => `export * from ${JSON.stringify(e)};`).join("");
+          let transformed;
+          if (sideEffects === false) {
+            transformed = [
+              // make sure we don't manipulate the first line so that sourcemap is fine
+              reexports + "var mod, exports = /* @__PURE__ */ ((exports, module) => {" + contents,
+              "return module.exports})((mod = { exports: {} }).exports, mod); " + exportDefault
+            ];
+            if (exportsMap.length > 0) {
+              for (const [e, name] of exportsMap) {
+                transformed.push(`var ${name} = /* @__PURE__ */ (() => exports[${JSON.stringify(e)}])();`);
+              }
+              transformed.push(
+                `export { ${exportsMap.map(([e, name]) => e === name ? e : `${name} as ${JSON.stringify(e)}`).join(", ")} };`
+              );
+            }
+          } else {
+            transformed = [
+              reexports + "var exports = {}, module = { exports }; {" + contents,
+              "}; exports = module.exports; " + exportDefault
+            ];
+            if (exportsMap.length > 0) {
+              transformed.push(
+                `var { ${exportsMap.map(([e, name]) => e === name ? e : `${JSON.stringify(e)}: ${name}`).join(", ")} } = exports;`,
+                `export { ${exportsMap.map(([e, name]) => e === name ? e : `${name} as ${JSON.stringify(e)}`).join(", ")} };`
+              );
+            }
+          }
+          contents = transformed.join("\n") + (sourcemap ? "\n" + sourcemap : "");
+        }
+        function makeName(path) {
+          let name = `__import_${makeLegalIdentifier(path)}`;
+          if (contents.includes(name)) {
+            let suffix = 2;
+            while (contents.includes(`${name}${suffix}`)) suffix++;
+            name = `${name}${suffix}`;
+          }
+          return name;
+        }
+        let warnings;
+        try {
+          ({ warnings } = await require_esbuild().transform(contents, { format: "esm", logLevel: "silent" }));
+        } catch (err) {
+          ({ warnings } = err);
+        }
+        let lines = contents.split("\n");
+        let getOffset = cachedReduce(lines, (a, b) => a + 1 + b.length, 0);
+        if (warnings && (warnings = warnings.filter((e) => e.text.includes('"require" to "esm"'))).length) {
+          let edits = [];
+          let imports = [];
+          for (const { location } of warnings) {
+            if (location === null) continue;
+            const { line, lineText, column, length } = location;
+            const leftBrace = column + length + 1;
+            const path = lexer.readString(lineText, leftBrace);
+            if (path === null || is_ignored(path)) continue;
+            const rightBrace = lineText.indexOf(")", leftBrace + 2 + path.length) + 1;
+            let name = makeName(path);
+            let import_statement;
+            if (use_default_export(path)) {
+              import_statement = `import ${name} from ${JSON.stringify(path)};`;
+            } else {
+              import_statement = `import * as ${name} from ${JSON.stringify(path)};`;
+            }
+            let offset2 = getOffset(line - 1);
+            edits.push([offset2 + column, offset2 + rightBrace, name]);
+            imports.push(import_statement);
+          }
+          if (imports.length === 0) return null;
+          imports = orderedUniq(imports);
+          let offset = 0;
+          for (const [start, end, name] of edits) {
+            contents = contents.slice(0, start + offset) + name + contents.slice(end + offset);
+            offset += name.length - (end - start);
+          }
+          contents = prepend(contents, [...imports, cjsExports ? "exports;" : ""].join(""));
+          return { contents };
+        }
+      });
+    }
+  };
+}
+var index_default = commonjs;
+// Annotate the CommonJS export names for ESM import in node:
+0 && (module.exports = {
+  commonjs
+});
+//# sourceMappingURL=index.js.map
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 0d10e3993019d08a97151b9fec142fd3d51cd950..a587c6a1d9d00c0dfd7d44904bd82ed5475f9987 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -552,6 +552,10 @@ type Options = {
      * @default true
      */
     removeNodeProtocol?: boolean;
+
+    workspaceConfig?: Record<string, any>;
+
+    requireToImport?: boolean;
 };
 interface NormalizedExperimentalDtsConfig {
     entry: {
diff --git a/dist/index.js b/dist/index.js
index e875f0c94b50eb7921cfe54b8ebc40cca1a6c565..469486874bd5a1d5e3fcfd97fe679912ef33c44b 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -33,6 +33,8 @@ var _chunkJZ25TPTYjs = require('./chunk-JZ25TPTY.js');
 
 var _chunkTWFEYLU4js = require('./chunk-TWFEYLU4.js');
 
+var _commonjsPluginjs = require('./commonjs-plugin.js');
+
 // src/index.ts
 var _path = require('path'); var _path2 = _interopRequireDefault(_path);
 var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
@@ -83,7 +85,7 @@ var externalPlugin = ({
     name: `external`,
     setup(build2) {
       if (skipNodeModulesBundle) {
-        const resolvePatterns = _bundlerequire.tsconfigPathsToRegExp.call(void 0, 
+        const resolvePatterns = _bundlerequire.tsconfigPathsToRegExp.call(void 0,
           tsconfigResolvePaths || {}
         );
         build2.onResolve({ filter: /.*/ }, (args) => {
@@ -121,6 +123,7 @@ var externalPlugin = ({
 
 
 var postcssPlugin = ({
+  options,
   css,
   inject,
   cssLoader
@@ -135,7 +138,7 @@ var postcssPlugin = ({
           return configCache;
         }
         try {
-          const result = await loadConfig({}, process.cwd());
+          const result = await loadConfig({}, options.workspaceConfig?.workspaceRoot || process.cwd());
           configCache = result;
           return result;
         } catch (error) {
@@ -157,11 +160,11 @@ var postcssPlugin = ({
             contents: `
           export default function styleInject(css, { insertAt } = {}) {
             if (!css || typeof document === 'undefined') return
-          
+
             const head = document.head || document.getElementsByTagName('head')[0]
             const style = document.createElement('style')
             style.type = 'text/css'
-          
+
             if (insertAt === 'top') {
               if (head.firstChild) {
                 head.insertBefore(style, head.firstChild)
@@ -171,7 +174,7 @@ var postcssPlugin = ({
             } else {
               head.appendChild(style)
             }
-          
+
             if (style.styleSheet) {
               style.styleSheet.cssText = css
             } else {
@@ -237,7 +240,8 @@ var postcssPlugin = ({
 
 var useSvelteCssExtension = (p) => p.replace(/\.svelte$/, ".svelte.css");
 var sveltePlugin = ({
-  css
+  css,
+  options
 }) => {
   return {
     name: "svelte",
@@ -247,7 +251,7 @@ var sveltePlugin = ({
       build2.onResolve({ filter: /\.svelte\.css$/ }, (args) => {
         return {
           path: _path2.default.relative(
-            process.cwd(),
+            options.workspaceConfig?.workspaceRoot || process.cwd(),
             _path2.default.join(args.resolveDir, args.path)
           ),
           namespace: "svelte-css"
@@ -277,7 +281,7 @@ var sveltePlugin = ({
           return { text: message, location };
         };
         const source = await _fs2.default.promises.readFile(args.path, "utf8");
-        const filename = _path2.default.relative(process.cwd(), args.path);
+        const filename = _path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), args.path);
         try {
           const preprocess = await svelte.preprocess(
             source,
@@ -444,7 +448,7 @@ var generateExternal = async (external) => {
       result.push(item);
       continue;
     }
-    const pkgPath = _path2.default.isAbsolute(item) ? _path2.default.dirname(item) : _path2.default.dirname(_path2.default.resolve(process.cwd(), item));
+    const pkgPath = _path2.default.isAbsolute(item) ? _path2.default.dirname(item) : _path2.default.dirname(_path2.default.resolve(options.workspaceConfig?.workspaceRoot || process.cwd(), item));
     const deps = await _chunkVGC3FXLUjs.getProductionDeps.call(void 0, pkgPath);
     result.push(...deps);
   }
@@ -457,8 +461,8 @@ async function runEsbuild(options, {
   buildDependencies,
   pluginContainer
 }) {
-  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunkVGC3FXLUjs.getProductionDeps.call(void 0, process.cwd());
+  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
+  const deps = await _chunkVGC3FXLUjs.getProductionDeps.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
   const external = [
     // Exclude dependencies, e.g. `lodash`, `lodash/get`
     ...deps.map((dep) => new RegExp(`^${dep}($|\\/|\\\\)`)),
@@ -479,6 +483,10 @@ async function runEsbuild(options, {
   const platform = options.platform || "node";
   const loader = options.loader || {};
   const injectShims = options.shims;
+  const bundle = typeof options.bundle === "undefined"
+    ? true
+    : options.bundle;
+
   pluginContainer.setContext({
     format,
     splitting,
@@ -488,6 +496,7 @@ async function runEsbuild(options, {
   await pluginContainer.buildStarted();
   const esbuildPlugins = [
     format === "cjs" && options.removeNodeProtocol && nodeProtocolPlugin(),
+    format === "esm" && bundle && _commonjsPluginjs.commonjs.call(void 0, ),
     {
       name: "modify-options",
       setup(build2) {
@@ -508,11 +517,12 @@ async function runEsbuild(options, {
     options.tsconfigDecoratorMetadata && swcPlugin({ logger: logger3 }),
     nativeNodeModulesPlugin(),
     postcssPlugin({
+      options,
       css,
       inject: options.injectStyle,
       cssLoader: loader[".css"]
     }),
-    sveltePlugin({ css }),
+    sveltePlugin({ css, options }),
     ...options.esbuildPlugins || []
   ];
   const banner = typeof options.banner === "function" ? options.banner({ format }) : options.banner;
@@ -521,7 +531,7 @@ async function runEsbuild(options, {
     result = await _esbuild.build.call(void 0, {
       entryPoints: options.entry,
       format: format === "cjs" && splitting || options.treeshake ? "esm" : format,
-      bundle: typeof options.bundle === "undefined" ? true : options.bundle,
+      bundle,
       platform,
       globalName: options.globalName,
       jsxFactory: options.jsxFactory,
@@ -610,6 +620,7 @@ async function runEsbuild(options, {
   }
   if (result && result.outputFiles) {
     await pluginContainer.buildFinished({
+      options,
       outputFiles: result.outputFiles,
       metafile: result.metafile
     });
@@ -708,8 +719,8 @@ var parseSourceMap = (map) => {
 var isJS = (path12) => /\.(js|mjs|cjs)$/.test(path12);
 var isCSS = (path12) => /\.css$/.test(path12);
 var PluginContainer = class {
-  
-  
+
+
   constructor(plugins) {
     this.plugins = plugins;
   }
@@ -735,12 +746,13 @@ var PluginContainer = class {
     }
   }
   async buildFinished({
+    options,
     outputFiles,
     metafile
   }) {
     const files = outputFiles.filter((file) => !file.path.endsWith(".map")).map((file) => {
       if (isJS(file.path) || isCSS(file.path)) {
-        const relativePath = _chunkTWFEYLU4js.slash.call(void 0, _path2.default.relative(process.cwd(), file.path));
+        const relativePath = _chunkTWFEYLU4js.slash.call(void 0, _path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), file.path));
         const meta = _optionalChain([metafile, 'optionalAccess', _6 => _6.outputs, 'access', _7 => _7[relativePath]]);
         return {
           type: "chunk",
@@ -795,7 +807,7 @@ var PluginContainer = class {
         });
         writtenFiles.push({
           get name() {
-            return _path2.default.relative(process.cwd(), info.path);
+            return _path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), info.path);
           },
           get size() {
             return contents.length;
@@ -808,7 +820,7 @@ var PluginContainer = class {
           await outputFile(outPath, contents2);
           writtenFiles.push({
             get name() {
-              return _path2.default.relative(process.cwd(), outPath);
+              return _path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), outPath);
             },
             get size() {
               return contents2.length;
@@ -891,7 +903,7 @@ var sizeReporter = () => {
   return {
     name: "size-reporter",
     buildEnd({ writtenFiles }) {
-      _chunkVGC3FXLUjs.reportSize.call(void 0, 
+      _chunkVGC3FXLUjs.reportSize.call(void 0,
         this.logger,
         this.format,
         writtenFiles.reduce((res, file) => {
@@ -965,7 +977,7 @@ var copyPublicDir = (publicDir, outDir) => {
 };
 var isInPublicDir = (publicDir, filePath) => {
   if (!publicDir) return false;
-  const publicPath = _chunkTWFEYLU4js.slash.call(void 0, 
+  const publicPath = _chunkTWFEYLU4js.slash.call(void 0,
     _path2.default.resolve(publicDir === true ? "public" : publicDir)
   );
   return _chunkTWFEYLU4js.slash.call(void 0, _path2.default.resolve(filePath)).startsWith(`${publicPath}/`);
@@ -1132,13 +1144,16 @@ ${diagnosticMessage}`
   }
   return fileMapping;
 }
-function emit(compilerOptions, tsconfig) {
-  const cwd = process.cwd();
-  const rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, cwd, tsconfig);
+function emit(compilerOptions, tsconfig, _options) {
+  const cwd = _options.workspaceConfig?.workspaceRoot || process.cwd();
+  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, cwd, tsconfig.replace(cwd, ""));
   if (!rawTsconfig) {
-    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"} in ${cwd}`);
+    rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, process.cwd(), tsconfig.replace(cwd, ""));
+    if (!rawTsconfig) {
+      throw new Error(`Unable to find ${tsconfig || "tsconfig.json"} in ${cwd}`);
+    }
   }
-  const declarationDir = _chunkTWFEYLU4js.ensureTempDeclarationDir.call(void 0, );
+  const declarationDir = _chunkTWFEYLU4js.ensureTempDeclarationDir.call(void 0, _options);
   const parsedTsconfig = _typescript2.default.parseJsonConfigFileContent(
     {
       ...rawTsconfig.data,
@@ -1174,7 +1189,7 @@ function runTypeScriptCompiler(options) {
     };
     logger.info("tsc", "Build start");
     const dtsOptions = options.experimentalDts;
-    const exports = emit(dtsOptions.compilerOptions, options.tsconfig);
+    const exports = emit(dtsOptions.compilerOptions, options.tsconfig, options);
     logger.success("tsc", `\u26A1\uFE0F Build success in ${getDuration()}`);
     return exports;
   } catch (error) {
@@ -1199,7 +1214,7 @@ function formatAggregationExports(exports, declarationDirPath) {
 `;
 }
 function formatAggregationExport(declaration, declarationDirPath) {
-  const dest = _chunkTWFEYLU4js.replaceDtsWithJsExtensions.call(void 0, 
+  const dest = _chunkTWFEYLU4js.replaceDtsWithJsExtensions.call(void 0,
     `./${_path2.default.posix.normalize(
       _chunkTWFEYLU4js.slash.call(void 0, _path2.default.relative(declarationDirPath, declaration.destFileName))
     )}`
@@ -1221,7 +1236,7 @@ function formatAggregationExport(declaration, declarationDirPath) {
   }
 }
 function formatDistributionExports(exports, fromFilePath, toFilePath) {
-  let importPath = _chunkTWFEYLU4js.replaceDtsWithJsExtensions.call(void 0, 
+  let importPath = _chunkTWFEYLU4js.replaceDtsWithJsExtensions.call(void 0,
     _path2.default.posix.relative(
       _path2.default.posix.dirname(_path2.default.posix.normalize(_chunkTWFEYLU4js.slash.call(void 0, fromFilePath))),
       _path2.default.posix.normalize(_chunkTWFEYLU4js.slash.call(void 0, toFilePath))
@@ -1276,8 +1291,8 @@ function formatDistributionExport(declaration, dest) {
 
 // src/api-extractor.ts
 var logger2 = _chunkVGC3FXLUjs.createLogger.call(void 0, );
-function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
-  const cwd = process.cwd();
+function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath, options) {
+  const cwd = options.workspaceConfig?.workspaceRoot || process.cwd();
   const packageJsonFullPath = _path2.default.join(cwd, "package.json");
   const configObject = {
     mainEntryPointFilePath: inputFilePath,
@@ -1327,9 +1342,9 @@ async function rollupDtsFiles(options, exports, format) {
   if (!options.experimentalDts || !_optionalChain([options, 'access', _18 => _18.experimentalDts, 'optionalAccess', _19 => _19.entry])) {
     return;
   }
-  const declarationDir = _chunkTWFEYLU4js.ensureTempDeclarationDir.call(void 0, );
+  const declarationDir = _chunkTWFEYLU4js.ensureTempDeclarationDir.call(void 0, options);
   const outDir = options.outDir || "dist";
-  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, process.cwd());
+  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
   const dtsExtension = _chunkTWFEYLU4js.defaultOutExtension.call(void 0, { format, pkgType: pkg.type }).dts;
   const tsconfig = options.tsconfig || "tsconfig.json";
   let dtsInputFilePath = _path2.default.join(
@@ -1338,11 +1353,11 @@ async function rollupDtsFiles(options, exports, format) {
   );
   dtsInputFilePath = dtsInputFilePath.replace(/\.d\.mts$/, ".dmts.d.ts").replace(/\.d\.cts$/, ".dcts.d.ts");
   const dtsOutputFilePath = _path2.default.join(outDir, `_tsup-dts-rollup${dtsExtension}`);
-  _chunkTWFEYLU4js.writeFileSync.call(void 0, 
+  _chunkTWFEYLU4js.writeFileSync.call(void 0,
     dtsInputFilePath,
-    formatAggregationExports(exports, declarationDir)
+    formatAggregationExports(exports, declarationDir, options)
   );
-  rollupDtsFile(dtsInputFilePath, dtsOutputFilePath, tsconfig);
+  rollupDtsFile(dtsInputFilePath, dtsOutputFilePath, tsconfig, options);
   for (let [out, sourceFileName] of Object.entries(
     options.experimentalDts.entry
   )) {
@@ -1351,7 +1366,7 @@ async function rollupDtsFiles(options, exports, format) {
     const currentExports = exports.filter(
       (declaration) => declaration.sourceFileName === sourceFileName
     );
-    _chunkTWFEYLU4js.writeFileSync.call(void 0, 
+    _chunkTWFEYLU4js.writeFileSync.call(void 0,
       outFileName,
       formatDistributionExports(currentExports, outFileName, dtsOutputFilePath)
     );
@@ -1423,10 +1438,16 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
     ..._options,
     format: typeof _options.format === "string" ? [_options.format] : _options.format || ["cjs"],
     dts: typeof _options.dts === "boolean" ? _options.dts ? {} : void 0 : typeof _options.dts === "string" ? { entry: _options.dts } : _options.dts,
-    experimentalDts: await _chunkTWFEYLU4js.resolveInitialExperimentalDtsConfig.call(void 0, 
+    experimentalDts: await _chunkTWFEYLU4js.resolveInitialExperimentalDtsConfig.call(void 0,
       _options.experimentalDts
     )
   };
+
+  if (!options.workspaceConfig)
+    options.workspaceConfig = {};
+  if (!options.workspaceConfig.workspaceRoot)
+    options.workspaceConfig.workspaceRoot = process.cwd();
+
   _chunkVGC3FXLUjs.setSilent.call(void 0, options.silent);
   const entry = options.entry || options.entryPoints;
   if (!entry || Object.keys(entry).length === 0) {
@@ -1449,11 +1470,11 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
     options.entry = entry;
     logger3.info("CLI", `Building entry: ${JSON.stringify(entry)}`);
   }
-  const tsconfig = _bundlerequire.loadTsConfig.call(void 0, process.cwd(), options.tsconfig);
+  const tsconfig = _bundlerequire.loadTsConfig.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd(), options.tsconfig);
   if (tsconfig) {
     logger3.info(
       "CLI",
-      `Using tsconfig: ${_path2.default.relative(process.cwd(), tsconfig.path)}`
+      `Using tsconfig: ${_path2.default.relative(options.workspaceConfig?.workspaceRoot || process.cwd(), tsconfig.path)}`
     );
     options.tsconfig = tsconfig.path;
     options.tsconfigResolvePaths = _optionalChain([tsconfig, 'access', _22 => _22.data, 'optionalAccess', _23 => _23.compilerOptions, 'optionalAccess', _24 => _24.paths]) || {};
@@ -1465,7 +1486,7 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
       };
     }
     if (options.experimentalDts) {
-      options.experimentalDts = await _chunkTWFEYLU4js.resolveExperimentalDtsConfig.call(void 0, 
+      options.experimentalDts = await _chunkTWFEYLU4js.resolveExperimentalDtsConfig.call(void 0,
         options,
         tsconfig
       );
@@ -1482,8 +1503,8 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
   return options;
 };
 async function build(_options) {
-  const config = _options.config === false ? {} : await _chunkVGC3FXLUjs.loadTsupConfig.call(void 0, 
-    process.cwd(),
+  const config = _options.config === false ? {} : await _chunkVGC3FXLUjs.loadTsupConfig.call(void 0,
+    _options.workspaceConfig?.workspaceRoot || process.cwd(),
     _options.config === true ? void 0 : _options.config
   );
   const configData = typeof config.data === "function" ? await config.data(_options) : config.data;
@@ -1514,7 +1535,7 @@ async function build(_options) {
           await experimentalDtsTask();
           if (options.dts) {
             await new Promise((resolve, reject) => {
-              const worker = new (0, _worker_threads.Worker)(_path2.default.join(__dirname, "./rollup.js"));
+              const worker = new (0, _worker_threads.Worker)(_path2.default.join(__dirname, "./rollup.cjs"));
               const terminateWorker = () => {
                 if (options.watch) return;
                 worker.terminate();
@@ -1559,7 +1580,7 @@ async function build(_options) {
             let onSuccessProcess;
             let onSuccessCleanup;
             const buildDependencies = /* @__PURE__ */ new Set();
-            let depsHash = await _chunkVGC3FXLUjs.getAllDepsHash.call(void 0, process.cwd());
+            let depsHash = await _chunkVGC3FXLUjs.getAllDepsHash.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
             const doOnSuccessCleanup = async () => {
               if (onSuccessProcess) {
                 await killProcess({
@@ -1572,7 +1593,7 @@ async function build(_options) {
               onSuccessProcess = void 0;
               onSuccessCleanup = void 0;
             };
-            const debouncedBuildAll = _chunkTWFEYLU4js.debouncePromise.call(void 0, 
+            const debouncedBuildAll = _chunkTWFEYLU4js.debouncePromise.call(void 0,
               () => {
                 return buildAll();
               },
@@ -1676,7 +1697,7 @@ async function build(_options) {
                 let shouldSkipChange = false;
                 if (options.watch === true) {
                   if (file === "package.json" && !buildDependencies.has(file)) {
-                    const currentHash = await _chunkVGC3FXLUjs.getAllDepsHash.call(void 0, process.cwd());
+                    const currentHash = await _chunkVGC3FXLUjs.getAllDepsHash.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
                     shouldSkipChange = currentHash === depsHash;
                     depsHash = currentHash;
                   } else if (!buildDependencies.has(file)) {
diff --git a/dist/rollup.js b/dist/rollup.js
index cc82363277fe849c9460937773d9bc8b5c86beb6..eb7b2d497869a941a5463e027d0c99f4bd394540 100644
--- a/dist/rollup.js
+++ b/dist/rollup.js
@@ -4834,14 +4834,14 @@ var require_rollup_plugin_dts = _chunkTWFEYLU4js.__commonJS.call(void 0, {
         configByPath.set(fromPath, config);
       }
     }
-    function getCompilerOptions(input, overrideOptions, overrideConfigPath) {
+    function getCompilerOptions(input, overrideOptions, overrideConfigPath, options) {
       const compilerOptions = { ...DEFAULT_OPTIONS, ...overrideOptions };
       let dirName = path__namespace.dirname(input);
       let dtsFiles = [];
       const cacheKey = overrideConfigPath || dirName;
       if (!configByPath.has(cacheKey)) {
         logCache("miss", cacheKey);
-        const configPath = overrideConfigPath ? path__namespace.resolve(process.cwd(), overrideConfigPath) : ts2.findConfigFile(dirName, ts2.sys.fileExists);
+        const configPath = overrideConfigPath ? path__namespace.resolve(options.workspaceConfig?.workspaceRoot || process.cwd(), overrideConfigPath) : ts2.findConfigFile(dirName, ts2.sys.fileExists);
         if (!configPath) {
           return { dtsFiles, dirName, compilerOptions };
         }
@@ -4862,7 +4862,7 @@ var require_rollup_plugin_dts = _chunkTWFEYLU4js.__commonJS.call(void 0, {
       } else {
         logCache("HIT", cacheKey);
       }
-      const { fileNames, options, errors } = configByPath.get(cacheKey);
+      const { fileNames, options: cachedOptions, errors } = configByPath.get(cacheKey);
       dtsFiles = fileNames.filter((name) => DTS_EXTENSIONS.test(name));
       if (errors.length) {
         console.error(ts2.formatDiagnostics(errors, formatHost));
@@ -4872,16 +4872,16 @@ var require_rollup_plugin_dts = _chunkTWFEYLU4js.__commonJS.call(void 0, {
         dtsFiles,
         dirName,
         compilerOptions: {
-          ...options,
+          ...cachedOptions,
           ...compilerOptions
         }
       };
     }
-    function createProgram$1(fileName, overrideOptions, tsconfig) {
-      const { dtsFiles, compilerOptions } = getCompilerOptions(fileName, overrideOptions, tsconfig);
+    function createProgram$1(fileName, overrideOptions, tsconfig, options) {
+      const { dtsFiles, compilerOptions } = getCompilerOptions(fileName, overrideOptions, tsconfig, options);
       return ts2.createProgram([fileName].concat(Array.from(dtsFiles)), compilerOptions, ts2.createCompilerHost(compilerOptions, true));
     }
-    function createPrograms(input, overrideOptions, tsconfig) {
+    function createPrograms(input, overrideOptions, tsconfig, _options) {
       const programs = [];
       let inputs = [];
       let dtsFiles = /* @__PURE__ */ new Set();
@@ -4892,7 +4892,7 @@ var require_rollup_plugin_dts = _chunkTWFEYLU4js.__commonJS.call(void 0, {
           continue;
         }
         main = path__namespace.resolve(main);
-        const options = getCompilerOptions(main, overrideOptions, tsconfig);
+        const options = getCompilerOptions(main, overrideOptions, tsconfig, _options);
         options.dtsFiles.forEach(dtsFiles.add, dtsFiles);
         if (!inputs.length) {
           inputs.push(main);
@@ -6273,7 +6273,7 @@ export { ${[...exportedNames].join(", ")} };
       return "";
     }
     var TS_EXTENSIONS = /\.([cm]ts|[tj]sx?)$/;
-    function getModule({ programs, resolvedOptions: { compilerOptions, tsconfig } }, fileName, code) {
+    function getModule({ programs, resolvedOptions: { compilerOptions, tsconfig } }, fileName, code, options) {
       if (!programs.length && DTS_EXTENSIONS.test(fileName)) {
         return { code };
       }
@@ -6286,7 +6286,7 @@ export { ${[...exportedNames].join(", ")} };
           program: existingProgram
         };
       } else if (ts2.sys.fileExists(fileName)) {
-        const newProgram = createProgram$1(fileName, compilerOptions, tsconfig);
+        const newProgram = createProgram$1(fileName, compilerOptions, tsconfig, options);
         programs.push(newProgram);
         const source = newProgram.getSourceFile(fileName);
         return {
@@ -6322,7 +6322,7 @@ export { ${[...exportedNames].join(", ")} };
               options2.input[name] = filename;
             }
           }
-          ctx.programs = createPrograms(Object.values(input), ctx.resolvedOptions.compilerOptions, ctx.resolvedOptions.tsconfig);
+          ctx.programs = createPrograms(Object.values(input), ctx.resolvedOptions.compilerOptions, ctx.resolvedOptions.tsconfig, options);
           return transformPlugin.options.call(this, options2);
         },
         transform(code, id) {
@@ -6337,7 +6337,7 @@ export { ${[...exportedNames].join(", ")} };
             }
           };
           const handleDtsFile = () => {
-            const module2 = getModule(ctx, id, code);
+            const module2 = getModule(ctx, id, code, options);
             if (module2) {
               watchFiles(module2);
               return transformPlugin.transform.call(this, module2.code, id);
@@ -6346,7 +6346,7 @@ export { ${[...exportedNames].join(", ")} };
           };
           const treatTsAsDts = () => {
             const declarationId = id.replace(TS_EXTENSIONS, dts);
-            let module2 = getModule(ctx, declarationId, code);
+            let module2 = getModule(ctx, declarationId, code, options);
             if (module2) {
               watchFiles(module2);
               return transformPlugin.transform.call(this, module2.code, declarationId);
@@ -6354,7 +6354,7 @@ export { ${[...exportedNames].join(", ")} };
             return null;
           };
           const generateDtsFromTs = () => {
-            const module2 = getModule(ctx, id, code);
+            const module2 = getModule(ctx, id, code, options);
             if (!module2 || !module2.source || !module2.program)
               return null;
             watchFiles(module2);
@@ -6390,7 +6390,7 @@ export { ${[...exportedNames].join(", ")} };
           let resolvedCompilerOptions = ctx.resolvedOptions.compilerOptions;
           if (ctx.resolvedOptions.tsconfig) {
             const resolvedSource = source.startsWith(".") ? path__namespace.resolve(path__namespace.dirname(importer), source) : source;
-            resolvedCompilerOptions = getCompilerOptions(resolvedSource, ctx.resolvedOptions.compilerOptions, ctx.resolvedOptions.tsconfig).compilerOptions;
+            resolvedCompilerOptions = getCompilerOptions(resolvedSource, ctx.resolvedOptions.compilerOptions, ctx.resolvedOptions.tsconfig, options).compilerOptions;
           }
           const { resolvedModule } = ts2.resolveModuleName(source, importer, resolvedCompilerOptions, ts2.sys);
           if (!resolvedModule) {
@@ -6646,7 +6646,7 @@ var resolveModule = (id, opts) => new Promise((resolve2, reject) => {
 var tsResolvePlugin = ({
   resolveOnly,
   ignore
-} = {}) => {
+} = {}, options) => {
   const resolveExtensions = [".d.ts", ".ts"];
   return {
     name: `ts-resolve`,
@@ -6674,7 +6674,7 @@ var tsResolvePlugin = ({
         debug(`skipped absolute path: %s`, source);
         return null;
       }
-      const basedir = importer ? await _fs2.default.promises.realpath(_path2.default.dirname(importer)) : process.cwd();
+      const basedir = importer ? await _fs2.default.promises.realpath(_path2.default.dirname(importer)) : options.workspaceConfig?.workspaceRoot || process.cwd();
       if (source[0] === ".") {
         return resolveModule(source, {
           basedir,
@@ -6744,8 +6744,8 @@ var getRollupConfig = async (options) => {
       };
     }
   }
-  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunkVGC3FXLUjs.getProductionDeps.call(void 0, process.cwd());
+  const pkg = await _chunkVGC3FXLUjs.loadPkg.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
+  const deps = await _chunkVGC3FXLUjs.getProductionDeps.call(void 0, options.workspaceConfig?.workspaceRoot || process.cwd());
   const tsupCleanPlugin = {
     name: "tsup:clean",
     async buildStart() {
@@ -6784,7 +6784,7 @@ var getRollupConfig = async (options) => {
       },
       plugins: [
         tsupCleanPlugin,
-        tsResolveOptions && tsResolvePlugin(tsResolveOptions),
+        tsResolveOptions && tsResolvePlugin(tsResolveOptions, options),
         json(),
         ignoreFiles,
         dtsPlugin.default({
@@ -6844,12 +6844,12 @@ async function runRollup(options) {
     const results = await Promise.all(options.outputConfig.map(bundle.write));
     const outputs = results.flatMap((result) => result.output);
     logger.success("dts", `\u26A1\uFE0F Build success in ${getDuration()}`);
-    _chunkVGC3FXLUjs.reportSize.call(void 0, 
+    _chunkVGC3FXLUjs.reportSize.call(void 0,
       logger,
       "dts",
       outputs.reduce((res, info) => {
         const name = _path2.default.relative(
-          process.cwd(),
+          options.workspaceConfig?.workspaceRoot || process.cwd(),
           _path2.default.join(options.outputConfig[0].dir || ".", info.fileName)
         );
         return {
@@ -6896,7 +6896,7 @@ var startRollup = async (options) => {
 };
 _optionalChain([_worker_threads.parentPort, 'optionalAccess', _26 => _26.on, 'call', _27 => _27("message", (data) => {
   logger.setName(data.configName);
-  const hasTypescript = _resolvefrom2.default.silent(process.cwd(), "typescript");
+  const hasTypescript = _resolvefrom2.default.silent(data.options.workspaceConfig?.workspaceRoot || process.cwd(), "typescript");
   if (!hasTypescript) {
     logger.error("dts", `You need to install "typescript" in your project`);
     _optionalChain([_worker_threads.parentPort, 'optionalAccess', _28 => _28.postMessage, 'call', _29 => _29("error")]);
diff --git a/package.json b/package.json
index e097674f47f621a80b4b16522e2fb565b0dae108..a63d7aea27d151b261f638e213ce08848033df3d 100644
--- a/package.json
+++ b/package.json
@@ -24,7 +24,8 @@
     "@microsoft/api-extractor": "^7.36.0",
     "@swc/core": "^1",
     "postcss": "^8.4.12",
-    "typescript": ">=4.5.0"
+    "typescript": ">=4.5.0",
+    "cjs-module-lexer": "*"
   },
   "peerDependenciesMeta": {
     "@microsoft/api-extractor": {
@@ -36,6 +37,9 @@
     "postcss": {
       "optional": true
     },
+    "cjs-module-lexer": {
+      "optional": true
+    },
     "typescript": {
       "optional": true
     }
@@ -81,7 +85,8 @@
     "tsup": "8.3.6",
     "typescript": "5.7.3",
     "vitest": "3.0.6",
-    "wait-for-expect": "3.0.2"
+    "wait-for-expect": "3.0.2",
+    "cjs-module-lexer": "^2.0.0"
   },
   "engines": {
     "node": ">=18"
