diff --git a/dist/chunk-GQ77QZBO.js b/dist/chunk-GQ77QZBO.js
index 6040ec0707ad57b89834936e19bead6c8014ff6f..c2e972d5b653c6b2a413ac1ef51dc9e30f208256 100644
--- a/dist/chunk-GQ77QZBO.js
+++ b/dist/chunk-GQ77QZBO.js
@@ -191,14 +191,14 @@ function defaultOutExtension({
     dts: dtsExtension
   };
 }
-function ensureTempDeclarationDir() {
+function ensureTempDeclarationDir(options) {
   const cwd = process.cwd();
-  const dirPath = _path2.default.join(cwd, ".tsup", "declaration");
+  const dirPath = _path2.default.join(cwd, "tmp", ".tsup", "declaration");
   if (_fs2.default.existsSync(dirPath)) {
     return dirPath;
   }
   _fs2.default.mkdirSync(dirPath, { recursive: true });
-  const gitIgnorePath = _path2.default.join(cwd, ".tsup", ".gitignore");
+  const gitIgnorePath = _path2.default.join(cwd, "tmp", ".tsup", ".gitignore");
   writeFileSync(gitIgnorePath, "**/*\n");
   return dirPath;
 }
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 36191e8e511f9cc413d70403ac86c989890f8d65..bdaf08854ae66cbc0e29888d6da80abc26a90f5f 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -528,6 +528,9 @@ type Options = {
      * @default false
      */
     cjsInterop?: boolean;
+
+    projectRoot?: string;
+    workspaceRoot?: string;
 };
 interface NormalizedExperimentalDtsConfig {
     entry: {
diff --git a/dist/index.js b/dist/index.js
index 2c8ba016932710c259e84a7a070271eb4f73da5b..b484d8e47994635e7bd349fb525ce7e9dace15de 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1603,6 +1603,36 @@ var generateExternal = async (external) => {
   }
   return result;
 };
+
+var packageJsonSearch = (outDir, silent, format, logger) => {
+  let pkgPath = outDir 
+    ? outDir
+    : process.cwd();
+  
+  !silent && logger.info(format, `⚡ Beginning search for package.json file: ${pkgPath}`);
+  if (pkgPath) {
+    const splits = pkgPath.split("/");
+    if (splits.length > 0) {
+      for (let i = 0; i < splits.length - 1; i++) {
+        const packageJsonPath = _path2.default.join(splits.slice(0, 
+          splits.length - i).join("/"), 
+            "package.json");
+        !silent && logger.info(format, 
+          `⚡ Searching for package.json file in ${packageJsonPath} (index: ${i})`);
+
+        if (_fs2.default.existsSync(packageJsonPath)) {
+          !silent && logger.info(format, 
+            `⚡ Found the package.json file in ${packageJsonPath} (index: ${i})`);
+          pkgPath = packageJsonPath.replace("package.json", "");
+          break;
+        }
+      }
+    }
+  }
+
+  return pkgPath;
+}
+
 async function runEsbuild(options, {
   format,
   css,
@@ -1610,8 +1640,12 @@ async function runEsbuild(options, {
   buildDependencies,
   pluginContainer
 }) {
-  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, process.cwd());
+  const pkgPath = packageJsonSearch(options.outDir, options.silent, format, logger3);
+  logger3.info(format, `⚡ Running ESBuild: ${pkgPath}`);
+
+  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, pkgPath);
+
   const external = [
     // Exclude dependencies, e.g. `lodash`, `lodash/get`
     ...deps.map((dep) => new RegExp(`^${dep}($|\\/|\\\\)`)),
@@ -1683,7 +1717,12 @@ async function runEsbuild(options, {
       target: options.target,
       banner,
       footer,
-      tsconfig: options.tsconfig,
+      tsconfig: options.tsconfig 
+        ? options.tsconfig 
+        : options.projectRoot 
+        ? _path2.default.join(options.projectRoot, 
+          "tsconfig.json") 
+        : "tsconfig.json",
       loader: {
         ".aac": "file",
         ".css": "file",
@@ -1724,15 +1763,16 @@ async function runEsbuild(options, {
         }, {})
       },
       inject: [
-        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../assets/cjs_shims.js") : "",
-        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../assets/esm_shims.js") : "",
+        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../../../assets/cjs_shims.js") : "",
+        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../../../assets/esm_shims.js") : "",
         ...options.inject || []
       ].filter(Boolean),
       outdir: options.legacyOutput && format !== "cjs" ? _path2.default.join(outDir, format) : outDir,
       outExtension: options.legacyOutput ? void 0 : outExtension,
       write: false,
       splitting,
-      logLevel: "error",
+      logLevel: options.silent !== false ? 'error' : 'info',
+      color: true,
       minify: options.minify === "terser" ? false : options.minify,
       minifyWhitespace: options.minifyWhitespace,
       minifyIdentifiers: options.minifyIdentifiers,
@@ -2196,13 +2236,17 @@ var AliasPool = (_class = class {constructor() { _class.prototype.__init.call(th
     return alias;
   }
 }, _class);
-function getExports(program, fileMapping) {
+function getExports(options, program, fileMapping) {
   let checker = program.getTypeChecker();
   let aliasPool = new AliasPool();
   let assignAlias = aliasPool.assign.bind(aliasPool);
+
+  const packagePath = _path.join(program.getCurrentDirectory(), 
+    packageJsonSearch(options.outDir, options.silent, "dts", logger));
+  logger.info("dts", `⚡ Getting Exports (DTS generate): ${packagePath}`);
+
   function extractExports(sourceFileName) {
-    const cwd = program.getCurrentDirectory();
-    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, cwd);
+    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, packagePath);
     const sourceFile = program.getSourceFile(sourceFileName);
     if (!sourceFile) {
       return [];
@@ -2287,18 +2331,34 @@ function emitDtsFiles(program, host) {
   }
   return fileMapping;
 }
-function emit(compilerOptions, tsconfig) {
-  let cwd = process.cwd();
-  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, cwd, tsconfig);
+function emit(options, compilerOptions, tsconfig) {
+  logger.info("tsc", `Trying to find ${tsconfig || "tsconfig.json"}`);
+
+  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, 
+    _path.dirname.call(void 0, tsconfig), 
+    _path.basename.call(void 0, tsconfig));
   if (!rawTsconfig) {
-    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"} in ${cwd}`);
+    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"}`);
+  }
+  if (!rawTsconfig.data) {
+    rawTsconfig.data = {};
   }
+  if (!rawTsconfig.data.compilerOptions) {
+    rawTsconfig.data.compilerOptions = {};
+  }
+
+  logger.info("tsc", "Getting temporary declaration directory");
   let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
+  logger.info("tsc", declarationDir);
+
+  logger.info("tsc", "Parsing tsconfig.json");
   let parsedTsconfig = _typescript2.default.parseJsonConfigFileContent(
     {
       ...rawTsconfig.data,
       compilerOptions: {
-        ..._optionalChain([rawTsconfig, 'access', _16 => _16.data, 'optionalAccess', _17 => _17.compilerOptions]),
+        ...rawTsconfig.data.compilerOptions,
+        ...compilerOptions,
+
         // Enable declaration emit and disable javascript emit
         noEmit: false,
         declaration: true,
@@ -2308,17 +2368,26 @@ function emit(compilerOptions, tsconfig) {
       }
     },
     _typescript2.default.sys,
-    tsconfig ? _path.dirname.call(void 0, tsconfig) : "./"
+    options.workspaceRoot 
+      ? options.workspaceRoot 
+      : tsconfig 
+      ? _path.dirname.call(void 0, tsconfig) 
+      : options.projectRoot
   );
-  let options = parsedTsconfig.options;
-  let host = _typescript2.default.createCompilerHost(options);
+  logger.info("tsc", parsedTsconfig);
+
+  let host = _typescript2.default.createCompilerHost(parsedTsconfig.options);
   let program = _typescript2.default.createProgram(
     parsedTsconfig.fileNames,
-    options,
+    parsedTsconfig.options,
     host
   );
+
+  logger.info("tsc", "Emitting DTS files");
   let fileMapping = emitDtsFiles(program, host);
-  return getExports(program, fileMapping);
+  logger.info("tsc", fileMapping);
+
+  return getExports(options, program, fileMapping);
 }
 function runTypeScriptCompiler(options) {
   try {
@@ -2328,7 +2397,7 @@ function runTypeScriptCompiler(options) {
     };
     logger.info("tsc", "Build start");
     const dtsOptions = options.experimentalDts;
-    const exports = emit(dtsOptions.compilerOptions, options.tsconfig);
+    const exports = emit(options, dtsOptions.compilerOptions, options.tsconfig);
     logger.success("tsc", `\u26A1\uFE0F Build success in ${getDuration()}`);
     return exports;
   } catch (error) {
@@ -2429,8 +2498,10 @@ function formatDistributionExport(declaration, dest) {
 // src/api-extractor.ts
 var logger2 = _chunk7G76EW2Rjs.createLogger.call(void 0, );
 function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
-  let cwd = process.cwd();
-  let packageJsonFullPath = _path2.default.join(cwd, "package.json");
+  let pkgPath = packageJsonSearch(outputFilePath, false, "dts", logger2);
+  logger2.info("dts", `⚡ Preparing to run API Extractor (DTS generate): ${pkgPath}`);
+
+  let packageJsonFullPath = _path2.default.join(pkgPath, "package.json");
   let configObject = {
     mainEntryPointFilePath: inputFilePath,
     apiReport: {
@@ -2447,7 +2518,7 @@ function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
     compiler: {
       tsconfigFilePath
     },
-    projectFolder: cwd
+    projectFolder: pkgPath
   };
   const prepareOptions = {
     configObject,
@@ -2477,7 +2548,11 @@ function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
 async function rollupDtsFiles(options, exports, format) {
   let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
   let outDir = options.outDir || "dist";
-  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
+  let pkgPath = packageJsonSearch(outDir, false, "dts", logger2);
+
+  logger2.info("dts", `⚡ Preparing to run Rollup (DTS generate): ${pkgPath}`);
+  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+
   let dtsExtension = _chunkGQ77QZBOjs.defaultOutExtension.call(void 0, { format, pkgType: pkg.type }).dts;
   let dtsInputFilePath = _path2.default.join(
     declarationDir,
