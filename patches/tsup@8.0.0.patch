diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 6b47a140691dd9daca407e3cab8e51c04fd119aa..0000000000000000000000000000000000000000
diff --git a/assets/cjs_shims.js b/assets/cjs_shims.js
deleted file mode 100644
index bcd355e87060dbbac60702442a11e731973407e1..0000000000000000000000000000000000000000
diff --git a/assets/esm_shims.js b/assets/esm_shims.js
deleted file mode 100644
index c238cb3317b5300d9fc7b3672ad859241f9bfd58..0000000000000000000000000000000000000000
diff --git a/assets/package.json b/assets/package.json
deleted file mode 100644
index a43829151e1423f0641beb1f114773f1c67fda72..0000000000000000000000000000000000000000
diff --git a/dist/chunk-GQ77QZBO.js b/dist/chunk-GQ77QZBO.js
index 6040ec0707ad57b89834936e19bead6c8014ff6f..c2e972d5b653c6b2a413ac1ef51dc9e30f208256 100644
--- a/dist/chunk-GQ77QZBO.js
+++ b/dist/chunk-GQ77QZBO.js
@@ -191,14 +191,14 @@ function defaultOutExtension({
     dts: dtsExtension
   };
 }
-function ensureTempDeclarationDir() {
+function ensureTempDeclarationDir(options) {
   const cwd = process.cwd();
-  const dirPath = _path2.default.join(cwd, ".tsup", "declaration");
+  const dirPath = _path2.default.join(cwd, "tmp", ".tsup", "declaration");
   if (_fs2.default.existsSync(dirPath)) {
     return dirPath;
   }
   _fs2.default.mkdirSync(dirPath, { recursive: true });
-  const gitIgnorePath = _path2.default.join(cwd, ".tsup", ".gitignore");
+  const gitIgnorePath = _path2.default.join(cwd, "tmp", ".tsup", ".gitignore");
   writeFileSync(gitIgnorePath, "**/*\n");
   return dirPath;
 }
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 36191e8e511f9cc413d70403ac86c989890f8d65..c88e541262ba18e25573b1879e447ac94367d0c9 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -528,6 +528,13 @@ type Options = {
      * @default false
      */
     cjsInterop?: boolean;
+
+    projectRoot?: string;
+    workspaceRoot?: string;
+
+    apiReport?: boolean;
+    docModel?: boolean;
+    tsdocMetadata?: boolean;
 };
 interface NormalizedExperimentalDtsConfig {
     entry: {
diff --git a/dist/index.js b/dist/index.js
index 2c8ba016932710c259e84a7a070271eb4f73da5b..d6a951732c0a00a7f7ea27e3c7d2fda533345a92 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1603,6 +1603,36 @@ var generateExternal = async (external) => {
   }
   return result;
 };
+
+var packageJsonSearch = (outDir, silent, format, logger) => {
+  let pkgPath = outDir 
+    ? outDir
+    : process.cwd();
+  
+  !silent && logger.info(format, `⚡ Beginning search for package.json file: ${pkgPath}`);
+  if (pkgPath) {
+    const splits = pkgPath.split("/");
+    if (splits.length > 0) {
+      for (let i = 0; i < splits.length - 1; i++) {
+        const packageJsonPath = _path2.default.join(splits.slice(0, 
+          splits.length - i).join("/"), 
+            "package.json");
+        !silent && logger.info(format, 
+          `⚡ Searching for package.json file in ${packageJsonPath} (index: ${i})`);
+
+        if (_fs2.default.existsSync(packageJsonPath)) {
+          !silent && logger.info(format, 
+            `⚡ Found the package.json file in ${packageJsonPath} (index: ${i})`);
+          pkgPath = packageJsonPath.replace("package.json", "");
+          break;
+        }
+      }
+    }
+  }
+
+  return pkgPath;
+}
+
 async function runEsbuild(options, {
   format,
   css,
@@ -1610,8 +1640,12 @@ async function runEsbuild(options, {
   buildDependencies,
   pluginContainer
 }) {
-  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, process.cwd());
+  const pkgPath = packageJsonSearch(options.outDir, options.silent, format, logger3);
+  logger3.info(format, `⚡ Running ESBuild: ${pkgPath}`);
+
+  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, pkgPath);
+
   const external = [
     // Exclude dependencies, e.g. `lodash`, `lodash/get`
     ...deps.map((dep) => new RegExp(`^${dep}($|\\/|\\\\)`)),
@@ -1683,7 +1717,12 @@ async function runEsbuild(options, {
       target: options.target,
       banner,
       footer,
-      tsconfig: options.tsconfig,
+      tsconfig: options.tsconfig 
+        ? options.tsconfig 
+        : options.projectRoot 
+        ? _path2.default.join(options.projectRoot, 
+          "tsconfig.json") 
+        : "tsconfig.json",
       loader: {
         ".aac": "file",
         ".css": "file",
@@ -1724,15 +1763,16 @@ async function runEsbuild(options, {
         }, {})
       },
       inject: [
-        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../assets/cjs_shims.js") : "",
-        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../assets/esm_shims.js") : "",
+        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../../../assets/cjs_shims.js") : "",
+        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../../../assets/esm_shims.js") : "",
         ...options.inject || []
       ].filter(Boolean),
       outdir: options.legacyOutput && format !== "cjs" ? _path2.default.join(outDir, format) : outDir,
       outExtension: options.legacyOutput ? void 0 : outExtension,
       write: false,
       splitting,
-      logLevel: "error",
+      logLevel: options.silent !== false ? 'error' : 'info',
+      color: true,
       minify: options.minify === "terser" ? false : options.minify,
       minifyWhitespace: options.minifyWhitespace,
       minifyIdentifiers: options.minifyIdentifiers,
@@ -2196,13 +2236,17 @@ var AliasPool = (_class = class {constructor() { _class.prototype.__init.call(th
     return alias;
   }
 }, _class);
-function getExports(program, fileMapping) {
+function getExports(options, program, fileMapping) {
   let checker = program.getTypeChecker();
   let aliasPool = new AliasPool();
   let assignAlias = aliasPool.assign.bind(aliasPool);
+
+  const packagePath = _path.join(program.getCurrentDirectory(), 
+    packageJsonSearch(options.outDir, options.silent, "dts", logger));
+  logger.info("dts", `⚡ Getting Exports (DTS generate): ${packagePath}`);
+
   function extractExports(sourceFileName) {
-    const cwd = program.getCurrentDirectory();
-    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, cwd);
+    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, packagePath);
     const sourceFile = program.getSourceFile(sourceFileName);
     if (!sourceFile) {
       return [];
@@ -2287,18 +2331,34 @@ function emitDtsFiles(program, host) {
   }
   return fileMapping;
 }
-function emit(compilerOptions, tsconfig) {
-  let cwd = process.cwd();
-  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, cwd, tsconfig);
+function emit(options, compilerOptions, tsconfig) {
+  logger.info("tsc", `Trying to find ${tsconfig || "tsconfig.json"}`);
+
+  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, 
+    _path.dirname.call(void 0, tsconfig), 
+    _path.basename.call(void 0, tsconfig));
   if (!rawTsconfig) {
-    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"} in ${cwd}`);
+    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"}`);
   }
+  if (!rawTsconfig.data) {
+    rawTsconfig.data = {};
+  }
+  if (!rawTsconfig.data.compilerOptions) {
+    rawTsconfig.data.compilerOptions = {};
+  }
+
+  logger.info("tsc", "Getting temporary declaration directory");
   let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
+  logger.info("tsc", declarationDir);
+
+  logger.info("tsc", "Parsing tsconfig.json");
   let parsedTsconfig = _typescript2.default.parseJsonConfigFileContent(
     {
       ...rawTsconfig.data,
       compilerOptions: {
-        ..._optionalChain([rawTsconfig, 'access', _16 => _16.data, 'optionalAccess', _17 => _17.compilerOptions]),
+        ...rawTsconfig.data.compilerOptions,
+        ...compilerOptions,
+
         // Enable declaration emit and disable javascript emit
         noEmit: false,
         declaration: true,
@@ -2308,17 +2368,26 @@ function emit(compilerOptions, tsconfig) {
       }
     },
     _typescript2.default.sys,
-    tsconfig ? _path.dirname.call(void 0, tsconfig) : "./"
+    options.workspaceRoot 
+      ? options.workspaceRoot 
+      : tsconfig 
+      ? _path.dirname.call(void 0, tsconfig) 
+      : options.projectRoot
   );
-  let options = parsedTsconfig.options;
-  let host = _typescript2.default.createCompilerHost(options);
+  logger.info("tsc", parsedTsconfig);
+
+  let host = _typescript2.default.createCompilerHost(parsedTsconfig.options);
   let program = _typescript2.default.createProgram(
     parsedTsconfig.fileNames,
-    options,
+    parsedTsconfig.options,
     host
   );
+
+  logger.info("tsc", "Emitting DTS files");
   let fileMapping = emitDtsFiles(program, host);
-  return getExports(program, fileMapping);
+  logger.info("tsc", fileMapping);
+
+  return getExports(options, program, fileMapping);
 }
 function runTypeScriptCompiler(options) {
   try {
@@ -2328,7 +2397,7 @@ function runTypeScriptCompiler(options) {
     };
     logger.info("tsc", "Build start");
     const dtsOptions = options.experimentalDts;
-    const exports = emit(dtsOptions.compilerOptions, options.tsconfig);
+    const exports = emit(options, dtsOptions.compilerOptions, options.tsconfig);
     logger.success("tsc", `\u26A1\uFE0F Build success in ${getDuration()}`);
     return exports;
   } catch (error) {
@@ -2428,32 +2497,79 @@ function formatDistributionExport(declaration, dest) {
 
 // src/api-extractor.ts
 var logger2 = _chunk7G76EW2Rjs.createLogger.call(void 0, );
-function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
-  let cwd = process.cwd();
-  let packageJsonFullPath = _path2.default.join(cwd, "package.json");
+function rollupDtsFile(options, inputFilePath, dtsExtension, tsconfigFilePath) {
+  let pkgPath = packageJsonSearch(options.outDir, options.silent, "dts", logger2);
+  if (pkgPath.endsWith("/")) {
+    pkgPath = pkgPath.slice(0, -1);
+  }
+
+  logger2.info("dts", `⚡ Preparing to run API Extractor (DTS generate): ${pkgPath}`);
+
+  let packageJsonFullPath = options.workspaceRoot 
+    ? _path2.default.join(options.workspaceRoot, pkgPath, "package.json")
+    : _path2.default.join(pkgPath, "package.json");
+
+  const splits = pkgPath.split("\\");
+  logger2.info("dts", splits);
+
+  let packageName = pkgPath;
+  if (splits.length > 2) {
+    packageName = splits[splits.length - 2];
+  }
+  const apiReferenceProjectDir = _path2.default.join("<projectFolder>",
+    pkgPath,
+    "api-reports");
+    
   let configObject = {
     mainEntryPointFilePath: inputFilePath,
     apiReport: {
-      enabled: false,
-      // `reportFileName` is not been used. It's just to fit the requirement of API Extractor.
-      reportFileName: "tsup-report.api.md"
+      enabled: options.apiReport !== false,
+      reportFileName: `${packageName}.api.md`,
+      reportFolder: apiReferenceProjectDir,
+      reportTempFolder: _path2.default.join("<projectFolder>", 
+        "tmp", 
+        "api-reports")
+    },
+    docModel: { 
+      enabled: options.docModel !== false,
+      apiJsonFilePath: _path2.default.join(apiReferenceProjectDir, 
+        `${packageName}.api.json`) 
     },
-    docModel: { enabled: false },
     dtsRollup: {
       enabled: true,
-      untrimmedFilePath: outputFilePath
+      untrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir,
+        `index${dtsExtension}`),
+      betaTrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir,
+        `index-beta.d.ts`),
+      publicTrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir, 
+        `index-public.d.ts`)
+    },
+    tsdocMetadata: { 
+      enabled: options.tsdocMetadata !== false,
+      tsdocMetadataFilePath: _path2.default.join(apiReferenceProjectDir, 
+        `${packageName}.api.tsdoc-metadata.json`) 
     },
-    tsdocMetadata: { enabled: false },
     compiler: {
       tsconfigFilePath
     },
-    projectFolder: cwd
+    projectFolder: "./"
   };
+
   const prepareOptions = {
     configObject,
     configObjectFullPath: void 0,
     packageJsonFullPath
   };
+
+ !options.silent && logger2.info("dts", `⚡ Current Directory: ${__dirname}`);
+ !options.silent && logger2.info("dts", "⚡ Running API Extractor with the following config: \n", 
+  prepareOptions);
+ !options.silent && logger2.info("dts", "⚡ Using the following compiler options: \n", 
+    JSON.stringify(prepareOptions.configObject?.compiler));
+
   const imported = _chunkGQ77QZBOjs.getApiExtractor.call(void 0, );
   if (!imported) {
     throw new Error(
@@ -2462,6 +2578,9 @@ function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
   }
   const { ExtractorConfig, Extractor } = imported;
   const extractorConfig = ExtractorConfig.prepare(prepareOptions);
+  !options.silent && logger2.info("dts", "⚡ Invoking extractor with the following prepare options: \n", 
+    JSON.stringify(extractorConfig));
+
   const extractorResult = Extractor.invoke(extractorConfig, {
     // Equivalent to the "--local" command-line parameter
     localBuild: true,
@@ -2477,31 +2596,47 @@ function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
 async function rollupDtsFiles(options, exports, format) {
   let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
   let outDir = options.outDir || "dist";
-  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
+  let pkgPath = packageJsonSearch(outDir, options.silent, "dts", logger2);
+
+  logger2.info("dts", `⚡ Preparing to run Rollup (DTS generate): ${pkgPath}`);
+  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+
   let dtsExtension = _chunkGQ77QZBOjs.defaultOutExtension.call(void 0, { format, pkgType: pkg.type }).dts;
+
   let dtsInputFilePath = _path2.default.join(
     declarationDir,
+    outDir.replace(pkgPath, ""),
     "_tsup-dts-aggregation" + dtsExtension
   );
   dtsInputFilePath = dtsInputFilePath.replace(/\.d\.mts$/, ".dmts.d.ts").replace(/\.d\.cts$/, ".dcts.d.ts");
-  let dtsOutputFilePath = _path2.default.join(outDir, "_tsup-dts-rollup" + dtsExtension);
+  
   _chunkGQ77QZBOjs.writeFileSync.call(void 0, 
     dtsInputFilePath,
     formatAggregationExports(exports, declarationDir)
   );
+
   rollupDtsFile(
-    dtsInputFilePath,
-    dtsOutputFilePath,
+    options,
+    _path2.default.join("<projectFolder>", 
+      dtsInputFilePath.replace(options.workspaceRoot, "")),
+    dtsExtension,
     options.tsconfig || "tsconfig.json"
   );
+  
   for (let [out, sourceFileName] of Object.entries(
     options.experimentalDts.entry
   )) {
     sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName);
     const outFileName = _path2.default.join(outDir, out + dtsExtension);
+
+    // Find all declarations that are exported from the current source file
+    const currentExports = exports.filter(
+      (declaration) => declaration.sourceFileName === sourceFileName
+    )
+
     _chunkGQ77QZBOjs.writeFileSync.call(void 0, 
       outFileName,
-      formatDistributionExports(exports, outFileName, dtsOutputFilePath)
+      formatDistributionExports(currentExports, outFileName, outDir)
     );
   }
 }
diff --git a/schema.json b/schema.json
deleted file mode 100644
index 0402482e7915288e66615aec6ee51d46250af832..0000000000000000000000000000000000000000
