diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 6b47a140691dd9daca407e3cab8e51c04fd119aa..0000000000000000000000000000000000000000
diff --git a/assets/cjs_shims.js b/assets/cjs_shims.js
deleted file mode 100644
index bcd355e87060dbbac60702442a11e731973407e1..0000000000000000000000000000000000000000
diff --git a/assets/esm_shims.js b/assets/esm_shims.js
deleted file mode 100644
index c238cb3317b5300d9fc7b3672ad859241f9bfd58..0000000000000000000000000000000000000000
diff --git a/assets/package.json b/assets/package.json
deleted file mode 100644
index a43829151e1423f0641beb1f114773f1c67fda72..0000000000000000000000000000000000000000
diff --git a/dist/chunk-GQ77QZBO.js b/dist/chunk-GQ77QZBO.js
index 6040ec0707ad57b89834936e19bead6c8014ff6f..f0f530671fa4a9e72dd5188e7a340a9259023357 100644
--- a/dist/chunk-GQ77QZBO.js
+++ b/dist/chunk-GQ77QZBO.js
@@ -191,14 +191,13 @@ function defaultOutExtension({
     dts: dtsExtension
   };
 }
-function ensureTempDeclarationDir() {
-  const cwd = process.cwd();
-  const dirPath = _path2.default.join(cwd, ".tsup", "declaration");
+function ensureTempDeclarationDir(options) {
+  const dirPath = _path2.default.join(options.workspaceRoot, "tmp", ".tsup", "declaration");
   if (_fs2.default.existsSync(dirPath)) {
     return dirPath;
   }
   _fs2.default.mkdirSync(dirPath, { recursive: true });
-  const gitIgnorePath = _path2.default.join(cwd, ".tsup", ".gitignore");
+  const gitIgnorePath = _path2.default.join(options.workspaceRoot, "tmp", ".tsup", ".gitignore");
   writeFileSync(gitIgnorePath, "**/*\n");
   return dirPath;
 }
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 36191e8e511f9cc413d70403ac86c989890f8d65..4200d6e04057d5d601b5593a068b3c07c6e256fe 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -528,6 +528,14 @@ type Options = {
      * @default false
      */
     cjsInterop?: boolean;
+
+    projectRoot?: string;
+    workspaceRoot?: string;
+    tsCdnStorage?: any;
+
+    apiReport?: boolean;
+    docModel?: boolean;
+    tsdocMetadata?: boolean;
 };
 interface NormalizedExperimentalDtsConfig {
     entry: {
diff --git a/dist/index.js b/dist/index.js
index 2c8ba016932710c259e84a7a070271eb4f73da5b..bf790db65f9fc925aa5e23fad2a9775505dbba33 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1590,19 +1590,54 @@ var getOutputExtensionMap = (options, format, pkgType) => {
     ".js": extension.js || defaultExtension.js
   };
 };
-var generateExternal = async (external) => {
+var generateExternal = async (external, options, logger) => {
   const result = [];
+
+  const pkgJsonPath = packageJsonSearch(options.outDir, options.silent, "CLI", logger);
   for (const item of external) {
     if (typeof item !== "string" || !item.endsWith("package.json")) {
       result.push(item);
       continue;
     }
-    let pkgPath = _path2.default.isAbsolute(item) ? _path2.default.dirname(item) : _path2.default.dirname(_path2.default.resolve(process.cwd(), item));
+
+    let pkgPath = _path2.default.isAbsolute(item) 
+      ? _path2.default.dirname(item) 
+      : _path2.default.dirname(_path2.default.resolve(pkgJsonPath ?? process.cwd(), item));
     const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, pkgPath);
     result.push(...deps);
   }
   return result;
 };
+
+var packageJsonSearch = (outDir, silent, format, logger) => {
+  let pkgPath = outDir 
+    ? outDir
+    : process.cwd();
+  
+  !silent && logger && logger.info(format, `⚡ Beginning search for package.json file: ${pkgPath}`);
+  if (pkgPath) {
+    const splits = pkgPath.split("/");
+    if (splits.length > 0) {
+      for (let i = 0; i < splits.length - 1; i++) {
+        const packageJsonPath = _path2.default.join(splits.slice(0, 
+          splits.length - i).join("/"), 
+            "package.json");
+        !silent && logger && logger.info(format, 
+          `⚡ Searching for package.json file in ${packageJsonPath} (index: ${i})`);
+
+        if (_fs2.default.existsSync(packageJsonPath)) {
+          !silent && logger && logger.info(format, 
+            `⚡ Found the package.json file in ${packageJsonPath} (index: ${i})`);
+          pkgPath = packageJsonPath.replace("package.json", "");
+          break;
+        }
+      }
+    }
+  }
+
+  return pkgPath;
+}
+
 async function runEsbuild(options, {
   format,
   css,
@@ -1610,12 +1645,16 @@ async function runEsbuild(options, {
   buildDependencies,
   pluginContainer
 }) {
-  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, process.cwd());
+  const pkgPath = packageJsonSearch(options.outDir, options.silent, format, logger3);
+  logger3.info(format, `⚡ Running ESBuild: ${pkgPath}`);
+
+  const pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+  const deps = await _chunk7G76EW2Rjs.getProductionDeps.call(void 0, pkgPath);
+
   const external = [
     // Exclude dependencies, e.g. `lodash`, `lodash/get`
     ...deps.map((dep) => new RegExp(`^${dep}($|\\/|\\\\)`)),
-    ...await generateExternal(options.external || [])
+    ...await generateExternal(options.external || [], options, logger3)
   ];
   const outDir = options.outDir;
   const outExtension = getOutputExtensionMap(options, format, pkg.type);
@@ -1683,7 +1722,12 @@ async function runEsbuild(options, {
       target: options.target,
       banner,
       footer,
-      tsconfig: options.tsconfig,
+      tsconfig: options.tsconfig 
+        ? options.tsconfig 
+        : options.projectRoot 
+        ? _path2.default.join(options.projectRoot, 
+          "tsconfig.json") 
+        : "tsconfig.json",
       loader: {
         ".aac": "file",
         ".css": "file",
@@ -1724,15 +1768,16 @@ async function runEsbuild(options, {
         }, {})
       },
       inject: [
-        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../assets/cjs_shims.js") : "",
-        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../assets/esm_shims.js") : "",
+        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../../../assets/cjs_shims.js") : "",
+        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../../../assets/esm_shims.js") : "",
         ...options.inject || []
       ].filter(Boolean),
       outdir: options.legacyOutput && format !== "cjs" ? _path2.default.join(outDir, format) : outDir,
       outExtension: options.legacyOutput ? void 0 : outExtension,
       write: false,
       splitting,
-      logLevel: "error",
+      logLevel: options.silent !== false ? 'error' : 'info',
+      color: true,
       minify: options.minify === "terser" ? false : options.minify,
       minifyWhitespace: options.minifyWhitespace,
       minifyIdentifiers: options.minifyIdentifiers,
@@ -2177,6 +2222,8 @@ var terserPlugin = ({
 // src/tsc.ts
 
 var _typescript = require('typescript'); var _typescript2 = _interopRequireDefault(_typescript);
+var _tsvfs = require('@typescript/vfs'); var _tsvfs2 = _interopRequireDefault(_tsvfs);
+var _lzString = require('lz-string'); var _lzString2 = _interopRequireDefault(_lzString);
 
 var logger = _chunk7G76EW2Rjs.createLogger.call(void 0, );
 var AliasPool = (_class = class {constructor() { _class.prototype.__init.call(this); }
@@ -2196,13 +2243,18 @@ var AliasPool = (_class = class {constructor() { _class.prototype.__init.call(th
     return alias;
   }
 }, _class);
-function getExports(program, fileMapping) {
+function getExports(options, program, fileMapping) {
   let checker = program.getTypeChecker();
   let aliasPool = new AliasPool();
   let assignAlias = aliasPool.assign.bind(aliasPool);
+
+  const workspaceRoot = options.workspaceRoot 
+      ? options.workspaceRoot 
+      : program.getCurrentDirectory();
+  logger.info("dts", `⚡ Getting Exports (DTS generate): ${workspaceRoot}`);
+
   function extractExports(sourceFileName) {
-    const cwd = program.getCurrentDirectory();
-    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, cwd);
+    sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, workspaceRoot);
     const sourceFile = program.getSourceFile(sourceFileName);
     if (!sourceFile) {
       return [];
@@ -2232,13 +2284,13 @@ function getExports(program, fileMapping) {
   }
   return program.getRootFileNames().flatMap(extractExports);
 }
-function emitDtsFiles(program, host) {
+function emitDtsFiles(program, host, options) {
   let fileMapping = /* @__PURE__ */ new Map();
   let writeFile = (fileName, text, writeByteOrderMark, onError, sourceFiles, data) => {
     const sourceFile = _optionalChain([sourceFiles, 'optionalAccess', _14 => _14[0]]);
     let sourceFileName = _optionalChain([sourceFile, 'optionalAccess', _15 => _15.fileName]);
     if (sourceFileName && !fileName.endsWith(".map")) {
-      const cwd = program.getCurrentDirectory();
+      const cwd = options.workspaceRoot ? options.workspaceRoot : program.getCurrentDirectory();
       fileMapping.set(
         _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName, cwd),
         _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, fileName, cwd)
@@ -2253,6 +2305,9 @@ function emitDtsFiles(program, host) {
       data
     );
   };
+
+  logger.info("tsc", "Emitting DTS files");
+
   let emitResult = program.emit(void 0, writeFile, void 0, true);
   let diagnostics = _typescript2.default.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
   let diagnosticMessages = [];
@@ -2287,48 +2342,156 @@ function emitDtsFiles(program, host) {
   }
   return fileMapping;
 }
-function emit(compilerOptions, tsconfig) {
-  let cwd = process.cwd();
-  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, cwd, tsconfig);
+
+/*const getLib = (name, logger) => {
+  const lib = _path.dirname(require.resolve("typescript"));
+  logger.info("tsc", `Getting lib from: ${_path.join(lib, name)}`);
+
+  return _fs2.default.readFileSync(_path.join(lib, name), "utf8");
+}
+
+const addLib = (name, map, logger) => {
+  map.set(name, getLib(name, logger))
+}*/
+
+const getFile = (name, logger) => {
+  logger.info("tsc", `Reading file content for: ${name}`);
+  return _fs2.default.promises.readFile(name, "utf8");
+}
+
+const addFile = async (name, map, options, logger) => {
+  const relativeName = name.replaceAll("/", "\\")
+    .replace(options.workspaceRoot, "")
+    .replaceAll("\\", "/");
+  if (map && map.has(relativeName)) {
+    logger.info("tsc", `Adding file to FS Map: ${relativeName}`);
+
+    const file = await getFile(name, logger);
+    map.set(relativeName, file);
+  }
+}
+
+async function emit(options, compilerOptions, tsconfig) {
+  logger.info("tsc", `Trying to find ${tsconfig || "tsconfig.json"}`);
+
+  let rawTsconfig = _bundlerequire.loadTsConfig.call(void 0, 
+    _path.dirname.call(void 0, tsconfig), 
+    _path.basename.call(void 0, tsconfig));
   if (!rawTsconfig) {
-    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"} in ${cwd}`);
+    throw new Error(`Unable to find ${tsconfig || "tsconfig.json"}`);
+  }
+  if (!rawTsconfig.data) {
+    rawTsconfig.data = {};
   }
-  let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
+  if (!rawTsconfig.data.compilerOptions) {
+    rawTsconfig.data.compilerOptions = {};
+  }
+
+  logger.info("tsc", "Getting temporary declaration directory");
+  let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, options);
+  logger.info("tsc", `Temporary declaration directory: ${declarationDir}`);
+
+  logger.info("tsc", "Raw tsconfig.json: ");
+  logger.info("tsc", rawTsconfig);
+  logger.info("tsc", "Parsing tsconfig.json");
+
   let parsedTsconfig = _typescript2.default.parseJsonConfigFileContent(
     {
       ...rawTsconfig.data,
       compilerOptions: {
-        ..._optionalChain([rawTsconfig, 'access', _16 => _16.data, 'optionalAccess', _17 => _17.compilerOptions]),
+        ...rawTsconfig.data.compilerOptions,
+
         // Enable declaration emit and disable javascript emit
+        outDir: options.outDir,
+        allowJs: true,
         noEmit: false,
         declaration: true,
         declarationMap: true,
         declarationDir,
         emitDeclarationOnly: true
-      }
+      },
+      files: [
+        ...(rawTsconfig.data.files ?? []), 
+        ...(rawTsconfig.files ?? []), 
+      ],
+      include: [ 
+        ...(rawTsconfig.data.include?.map?.(include => _path.join(options.projectRoot, 
+          include)) ?? []),
+      ],
+      exclude: [ 
+        ...(rawTsconfig.data.exclude?.map?.(exclude => _path.join(options.projectRoot, 
+          exclude)) ?? []),
+      ],
     },
     _typescript2.default.sys,
-    tsconfig ? _path.dirname.call(void 0, tsconfig) : "./"
+    options.workspaceRoot 
+      ? options.workspaceRoot 
+      : tsconfig 
+      ? _path.dirname.call(void 0, tsconfig) 
+      : options.projectRoot
+  );
+  logger.info("tsc", parsedTsconfig);
+
+  const fsMap = await _tsvfs2.createDefaultMapFromNodeModules(parsedTsconfig.options, 
+    _typescript2.default,
+    options.workspaceRoot);
+  logger.info("tsc", "Created FS Map");
+
+  /*parsedTsconfig.options.lib.forEach(lib => addLib(lib, fsMap, logger));
+  logger.info("tsc", "Added libs to FS Map");
+
+  fsMap = _tsvfs2.addFilesForTypesIntoFolder(fsMap);
+  logger.info("tsc", "Added types to FS Map");*/
+
+  await Promise.all(parsedTsconfig.fileNames.map((fileName) => 
+    addFile(fileName, fsMap, options, logger)));
+  logger.info("tsc", "Added files to FS Map");
+
+  const system = _tsvfs2.createFSBackedSystem(fsMap,
+    options.workspaceRoot,
+    _typescript2.default);
+  logger.info("tsc", "Created virtual file system");
+
+  const host = _tsvfs2.createVirtualCompilerHost(system, 
+    parsedTsconfig.options, 
+    _typescript2.default);
+  logger.info("tsc", "Created virtual compiler host");
+
+  const fileNames = [...fsMap.keys()];
+  logger.info("tsc", `Found the following file names: ${fileNames.join(" \n")}`);
+  const program = _typescript2.default.createProgram(
+    fileNames,
+    parsedTsconfig.options,
+    host.compilerHost
   );
-  let options = parsedTsconfig.options;
-  let host = _typescript2.default.createCompilerHost(options);
+  logger.info("tsc", "Created program");
+    
+  /* let host = _typescript2.default.createCompilerHost(parsedTsconfig.options);
   let program = _typescript2.default.createProgram(
     parsedTsconfig.fileNames,
-    options,
+    parsedTsconfig.options,
     host
-  );
-  let fileMapping = emitDtsFiles(program, host);
-  return getExports(program, fileMapping);
+  );*/
+
+  logger.info("tsc", "Emitting DTS files with the following options: ");
+  logger.info("tsc", parsedTsconfig.options);
+
+  let fileMapping = emitDtsFiles(program, host.compilerHost, options);
+  logger.info("tsc", fileMapping);
+
+  return getExports(options, program, fileMapping);
 }
-function runTypeScriptCompiler(options) {
+async function runTypeScriptCompiler(options) {
   try {
     const start = Date.now();
     const getDuration = () => {
       return `${Math.floor(Date.now() - start)}ms`;
     };
+
     logger.info("tsc", "Build start");
     const dtsOptions = options.experimentalDts;
-    const exports = emit(dtsOptions.compilerOptions, options.tsconfig);
+    const exports = await emit(options, dtsOptions.compilerOptions, options.tsconfig);
+
     logger.success("tsc", `\u26A1\uFE0F Build success in ${getDuration()}`);
     return exports;
   } catch (error) {
@@ -2428,40 +2591,94 @@ function formatDistributionExport(declaration, dest) {
 
 // src/api-extractor.ts
 var logger2 = _chunk7G76EW2Rjs.createLogger.call(void 0, );
-function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
-  let cwd = process.cwd();
-  let packageJsonFullPath = _path2.default.join(cwd, "package.json");
+function rollupDtsFile(options, inputFilePath, dtsExtension, tsconfigFilePath) {
+  let pkgPath = packageJsonSearch(options.outDir, options.silent, "dts", logger2);
+  if (pkgPath.endsWith("/")) {
+    pkgPath = pkgPath.slice(0, -1);
+  }
+
+  logger2.info("dts", `⚡ Preparing to run API Extractor (DTS generate): ${pkgPath}`);
+
+  let packageJsonFullPath = options.workspaceRoot 
+    ? _path2.default.join(options.workspaceRoot, pkgPath, "package.json")
+    : _path2.default.join(pkgPath, "package.json");
+
+  const splits = pkgPath.split("\\");
+  logger2.info("dts", splits);
+
+  let packageName = pkgPath;
+  if (splits.length > 2) {
+    packageName = splits[splits.length - 2];
+  }
+  const apiReferenceProjectDir = _path2.default.join("<projectFolder>",
+    pkgPath,
+    "api-reports");
+    
   let configObject = {
     mainEntryPointFilePath: inputFilePath,
     apiReport: {
-      enabled: false,
-      // `reportFileName` is not been used. It's just to fit the requirement of API Extractor.
-      reportFileName: "tsup-report.api.md"
+      enabled: options.apiReport !== false,
+      reportFileName: `${packageName}.api.md`,
+      reportFolder: apiReferenceProjectDir,
+      reportTempFolder: _path2.default.join("<projectFolder>", 
+        "tmp", 
+        "api-reports")
+    },
+    docModel: { 
+      enabled: options.docModel !== false,
+      apiJsonFilePath: _path2.default.join(apiReferenceProjectDir, 
+        `${packageName}.api.json`) 
     },
-    docModel: { enabled: false },
     dtsRollup: {
       enabled: true,
-      untrimmedFilePath: outputFilePath
+      untrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir,
+        `index${dtsExtension}`),
+      betaTrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir,
+        `index-beta.d.ts`),
+      publicTrimmedFilePath: _path2.default.join("<projectFolder>", 
+        options.outDir, 
+        `index-public.d.ts`)
+    },
+    tsdocMetadata: { 
+      enabled: options.tsdocMetadata !== false,
+      tsdocMetadataFilePath: _path2.default.join(apiReferenceProjectDir, 
+        `${packageName}.api.tsdoc-metadata.json`) 
     },
-    tsdocMetadata: { enabled: false },
     compiler: {
       tsconfigFilePath
     },
-    projectFolder: cwd
+    projectFolder: "./"
   };
+
   const prepareOptions = {
     configObject,
     configObjectFullPath: void 0,
-    packageJsonFullPath
+    packageJsonFullPath: _path2.default.join(options.workspaceRoot, 
+      "dist", 
+      options.projectRoot, 
+      "package.json"),
   };
+
+ !options.silent && logger2.info("dts", `⚡ Current Directory: ${__dirname}`);
+ !options.silent && logger2.info("dts", "⚡ Running API Extractor with the following config: \n", 
+  prepareOptions);
+ !options.silent && logger2.info("dts", "⚡ Using the following compiler options: \n", 
+    JSON.stringify(prepareOptions.configObject?.compiler));
+
   const imported = _chunkGQ77QZBOjs.getApiExtractor.call(void 0, );
   if (!imported) {
     throw new Error(
       `@microsoft/api-extractor is not installed. Please install it first.`
     );
   }
+  
   const { ExtractorConfig, Extractor } = imported;
   const extractorConfig = ExtractorConfig.prepare(prepareOptions);
+  !options.silent && logger2.info("dts", "⚡ Invoking extractor with the following prepare options: \n", 
+    JSON.stringify(extractorConfig));
+
   const extractorResult = Extractor.invoke(extractorConfig, {
     // Equivalent to the "--local" command-line parameter
     localBuild: true,
@@ -2475,33 +2692,51 @@ function rollupDtsFile(inputFilePath, outputFilePath, tsconfigFilePath) {
   }
 }
 async function rollupDtsFiles(options, exports, format) {
-  let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, );
+  let declarationDir = _chunkGQ77QZBOjs.ensureTempDeclarationDir.call(void 0, options);
   let outDir = options.outDir || "dist";
-  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, process.cwd());
+  let pkgPath = packageJsonSearch(outDir, options.silent, "dts", logger2);
+
+  !options.silent && logger2.info("dts", `⚡ Preparing to run Rollup (DTS generate): ${pkgPath}`);
+  !options.silent && logger2.info("dts", `⚡ Exports list to use in generation: ${exports.map((e) => JSON.stringify(e)).join("\n")}`);
+
+  let pkg = await _chunk7G76EW2Rjs.loadPkg.call(void 0, pkgPath);
+
   let dtsExtension = _chunkGQ77QZBOjs.defaultOutExtension.call(void 0, { format, pkgType: pkg.type }).dts;
+
   let dtsInputFilePath = _path2.default.join(
     declarationDir,
+    outDir.replace(pkgPath, ""),
     "_tsup-dts-aggregation" + dtsExtension
   );
   dtsInputFilePath = dtsInputFilePath.replace(/\.d\.mts$/, ".dmts.d.ts").replace(/\.d\.cts$/, ".dcts.d.ts");
-  let dtsOutputFilePath = _path2.default.join(outDir, "_tsup-dts-rollup" + dtsExtension);
+  
   _chunkGQ77QZBOjs.writeFileSync.call(void 0, 
     dtsInputFilePath,
     formatAggregationExports(exports, declarationDir)
   );
+
   rollupDtsFile(
-    dtsInputFilePath,
-    dtsOutputFilePath,
+    options,
+    _path2.default.join("<projectFolder>", 
+      dtsInputFilePath.replace(options.workspaceRoot, "")),
+    dtsExtension,
     options.tsconfig || "tsconfig.json"
   );
+  
   for (let [out, sourceFileName] of Object.entries(
     options.experimentalDts.entry
   )) {
     sourceFileName = _chunkGQ77QZBOjs.toAbsolutePath.call(void 0, sourceFileName);
-    const outFileName = _path2.default.join(outDir, out + dtsExtension);
+    const outFileName = _path2.default.join(outDir, "decl", out + dtsExtension);
+
+    // Find all declarations that are exported from the current source file
+    const currentExports = exports.filter(
+      (declaration) => declaration.sourceFileName === sourceFileName
+    )
+
     _chunkGQ77QZBOjs.writeFileSync.call(void 0, 
       outFileName,
-      formatDistributionExports(exports, outFileName, dtsOutputFilePath)
+      formatDistributionExports(currentExports, outFileName, outDir)
     );
   }
 }
@@ -2592,11 +2827,14 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
     options.entry = entry;
     logger3.info("CLI", `Building entry: ${JSON.stringify(entry)}`);
   }
-  const tsconfig = _bundlerequire.loadTsConfig.call(void 0, process.cwd(), options.tsconfig);
+
+  !options.silent && logger2.info("CLI", `⚡ Normalizing options: ${options.tsconfig}`);
+
+  const tsconfig = _bundlerequire.loadTsConfig.call(void 0, options.workspaceRoot, options.tsconfig);
   if (tsconfig) {
     logger3.info(
       "CLI",
-      `Using tsconfig: ${_path2.default.relative(process.cwd(), tsconfig.path)}`
+      `Using tsconfig: ${_path2.default.relative(options.workspaceRoot, tsconfig.path)}`
     );
     options.tsconfig = tsconfig.path;
     options.tsconfigResolvePaths = _optionalChain([tsconfig, 'access', _20 => _20.data, 'optionalAccess', _21 => _21.compilerOptions, 'optionalAccess', _22 => _22.paths]) || {};
@@ -2610,7 +2848,8 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
     if (options.experimentalDts) {
       options.experimentalDts.compilerOptions = {
         ...tsconfig.data.compilerOptions || {},
-        ...options.experimentalDts.compilerOptions || {}
+        ...options.experimentalDts.compilerOptions || {},
+        outDir: options.outDir
       };
       options.experimentalDts.entry = _chunkGQ77QZBOjs.toObjectEntry.call(void 0, 
         Object.keys(options.experimentalDts.entry).length > 0 ? options.experimentalDts.entry : options.entry
@@ -2629,7 +2868,7 @@ var normalizeOptions = async (logger3, optionsFromConfigFile, optionsOverride) =
 };
 async function build(_options) {
   const config = _options.config === false ? {} : await _chunk7G76EW2Rjs.loadTsupConfig.call(void 0, 
-    process.cwd(),
+    _options.workspaceRoot ?? process.cwd(),
     _options.config === true ? void 0 : _options.config
   );
   const configData = typeof config.data === "function" ? await config.data(_options) : config.data;
@@ -2652,7 +2891,7 @@ async function build(_options) {
             );
           }
           if (options.experimentalDts) {
-            const exports = runTypeScriptCompiler(options);
+            const exports = await runTypeScriptCompiler(options);
             await runDtsRollup(options, exports);
           }
           if (options.dts) {
@@ -2695,7 +2934,7 @@ async function build(_options) {
             let onSuccessProcess;
             let onSuccessCleanup;
             const buildDependencies = /* @__PURE__ */ new Set();
-            let depsHash = await _chunk7G76EW2Rjs.getAllDepsHash.call(void 0, process.cwd());
+            let depsHash = await _chunk7G76EW2Rjs.getAllDepsHash.call(void 0, options.workspaceRoot ?? process.cwd());
             const doOnSuccessCleanup = async () => {
               if (onSuccessProcess) {
                 await killProcess({
@@ -2816,7 +3055,7 @@ async function build(_options) {
                 let shouldSkipChange = false;
                 if (options.watch === true) {
                   if (file === "package.json" && !buildDependencies.has(file)) {
-                    const currentHash = await _chunk7G76EW2Rjs.getAllDepsHash.call(void 0, process.cwd());
+                    const currentHash = await _chunk7G76EW2Rjs.getAllDepsHash.call(void 0, options.workspaceRoot ?? process.cwd());
                     shouldSkipChange = currentHash === depsHash;
                     depsHash = currentHash;
                   } else if (!buildDependencies.has(file)) {
diff --git a/schema.json b/schema.json
deleted file mode 100644
index 0402482e7915288e66615aec6ee51d46250af832..0000000000000000000000000000000000000000
