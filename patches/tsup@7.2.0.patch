diff --git a/dist/index.js b/dist/index.js
index 68c197cb2b8dfa928a448475b4020e7301da959e..83e28efa1f52c7dc4a661ff723b3545b1665441f 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1605,8 +1605,32 @@ async function runEsbuild(options, {
   buildDependencies,
   pluginContainer
 }) {
-  const pkg = await _chunk52KWB5QBjs.loadPkg.call(void 0, process.cwd());
-  const deps = await _chunk52KWB5QBjs.getProductionDeps.call(void 0, process.cwd());
+  let pkgPath = options.outDir 
+    ? options.outDir
+    : process.cwd();
+
+  !options.silent && logger.info(format, `⚡ Preparing to run ESBuild: ${pkgPath}`);
+  if (pkgPath) {
+    const splits = pkgPath.split("/");
+    if (splits.length > 0) {
+      for (let i = 0; i < splits.length - 1; i++) {
+        const packageJsonPath = _path2.default.join(splits.slice(0, 
+          splits.length - i).join("/"), 
+            "package.json");
+        !options.silent && logger.info(format, `⚡ Searching for package.json file in ${packageJsonPath} (index: ${i})`);
+
+        if (_fs2.default.existsSync(packageJsonPath)) {
+          !options.silent && logger.info(format, `⚡ Found the package.json file in ${packageJsonPath} (index: ${i})`);
+          pkgPath = packageJsonPath.replace("package.json", "");
+          break;
+        }
+      }
+    }
+  }
+
+  logger.info(format, `⚡ Running ESBuild: ${pkgPath}`);
+  const pkg = await _chunk52KWB5QBjs.loadPkg.call(void 0, pkgPath);
+  const deps = await _chunk52KWB5QBjs.getProductionDeps.call(void 0, pkgPath);
   const external = [
     // Exclude dependencies, e.g. `lodash`, `lodash/get`
     ...deps.map((dep) => new RegExp(`^${dep}($|\\/|\\\\)`)),
@@ -1719,15 +1743,16 @@ async function runEsbuild(options, {
         }, {})
       },
       inject: [
-        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../assets/cjs_shims.js") : "",
-        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../assets/esm_shims.js") : "",
+        format === "cjs" && injectShims ? _path2.default.join(__dirname, "../../../assets/cjs_shims.js") : "",
+        format === "esm" && injectShims && platform === "node" ? _path2.default.join(__dirname, "../../../assets/esm_shims.js") : "",
         ...options.inject || []
       ].filter(Boolean),
       outdir: options.legacyOutput && format !== "cjs" ? _path2.default.join(outDir, format) : outDir,
       outExtension: options.legacyOutput ? void 0 : outExtension,
       write: false,
       splitting,
-      logLevel: "error",
+      logLevel: options.silent ? 'error' : 'verbose',
+      color: true,
       minify: options.minify === "terser" ? false : options.minify,
       minifyWhitespace: options.minifyWhitespace,
       minifyIdentifiers: options.minifyIdentifiers,
@@ -2052,6 +2077,7 @@ var sizeReporter = () => {
 // src/plugins/tree-shaking.ts
 var import_rollup_plugin_hashbang = _chunkB7UJSB4Njs.__toESM.call(void 0, _chunk52KWB5QBjs.require_dist.call(void 0, ));
 var _rollup = require('rollup');
+const { exists } = require('fs-extra');
 var treeShakingPlugin = ({
   treeshake,
   name,
diff --git a/dist/rollup.js b/dist/rollup.js
index 0f6400eedfad49091ca952ee5863bd027e3b8417..f06f35c5fb7e104498aac9a18bb3c030093e70ae 100644
--- a/dist/rollup.js
+++ b/dist/rollup.js
@@ -6805,6 +6805,13 @@ export { ${[...exportedNames].join(", ")} };
             }
           }
         }
+
+        // https://github.com/Swatinem/rollup-plugin-dts/pull/287
+        // `this` is a reserved keyword that retrains meaning in certain Type-only contexts, including classes
+        if (name === "this") {
+          return;
+        }
+
         const { ident, expr } = createReference(id);
         this.declaration.params.push(expr);
         this.returnExpr.elements.push(ident);
