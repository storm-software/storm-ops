# Note: this pipelines is for the `storm-ops` repository, it should be used to build and release the Storm Nx-Plugin packages.
name: "CI/CD"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: override release tag
        required: false
  push:
    branches:
      - main
      - canary
      - experimental

env:
  CI: true
  # NX_CLOUD_DISTRIBUTED_EXECUTION: true # this enables DTE
  # NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 3 # expected number of agents
  # NX_BRANCH: ${{ github.event.number || github.ref_name }}
  # NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  STORM_REPOSITORY: ${{ github.repositoryUrl }}
  STORM_WORKSPACE_ROOT: ${{ github.workspace }}
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ github.token }}
  NPM_TOKEN: ${{ secrets.STORM_BOT_NPM_TOKEN }}
  CARGO_REGISTRY_TOKEN: ${{ secrets.STORM_BOT_CARGO_TOKEN }}

permissions:
  contents: write
  id-token: write

jobs:
  start:
    name: "Send in process notification"
    runs-on: ubuntu-latest
    if: github.repository == 'storm-software/storm-ops' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/canary' || github.ref == 'refs/heads/experimental')
    steps:
      - name: Send notification - Deployment started
        uses: storm-software/action-notify@main
        with:
          title: "Deployment for ${{ github.repository }} has started (In Progress)"
          subtitle: "Deployment for ${{ github.repository }} has started - #${{ github.run_number }}"
          description: "Deployment for ${{ github.repository }} is currently in process - #${{ github.run_number }}. Click here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}."
          color: 2077350
          status: "In Progress"
          slack-token: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
          telegram-token: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          telegram-chat: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}
          discord-webhook: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK}}

  process:
    name: "Continuous Integration"
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - start
    steps:
      - name: Setup workspace
        uses: storm-software/action-setup@main
        with:
          package-manager: pnpm
          package-manager-version: 9.15.2
          storm-bot-github-token: ${{ secrets.STORM_BOT_GITHUB_TOKEN }}
          ignore-scripts: Y

      - name: Build Storm Nx-Plugin packages
        run: pnpm build-plugins
        shell: bash

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      # - run: pnpm exec nx-cloud record -- nx format:write
      # - run: pnpm nx affected -t build --parallel=5

      # - name: Run commands in parallel
      #   run: |
      #     # initialize an array to store process IDs (PIDs)
      #     pids=()

      #     # function to run commands and store the PID
      #     function run_command() {
      #       local command=$1
      #       $command &  # run the command in the background
      #       pids+=($!)  # store the PID of the background process
      #     }

      #     # list of commands to be run on main has env flag NX_CLOUD_DISTRIBUTED_EXECUTION set to false
      #     run_command "NX_CLOUD_DISTRIBUTED_EXECUTION=false pnpm exec nx-cloud record -- nx format:check"

      #     # list of commands to be run on agents
      #     run_command "pnpm nx affected -t lint,format,build --parallel=5"

      #     # wait for all background processes to finish
      #     for pid in ${pids[*]}; do
      #       if ! wait $pid; then
      #         exit 1  # exit with an error status if any process fails
      #       fi
      #     done

      #     exit 0 # exits with success status if a all processes complete successfully

      # - name: Get appropriate base and head commits for `nx affected` commands
      #   uses: nrwl/nx-set-shas@v4
      #   if: ${{ github.event_name == 'pull_request' }}
      #   with:
      #     main-branch-name: "main"

      # - name: Set appropriate base and head commits for `nx affected` commands
      #   run: |
      #     echo "BASE: ${{ env.NX_BASE }}"
      #     echo "HEAD: ${{ env.NX_HEAD }}"
      #   shell: bash

      - name: Run build script
        run: pnpm build-all
        shell: bash

      # - name: Run formatters scripts
      #   run: pnpm nx affected -t lint,format,build --parallel=5
      #   shell: bash

      - name: Add permissions to linting tools
        run: chmod a=rwx dist/packages/linting-tools/bin/lint.js
      - name: Add permissions to alex config file
        run: chmod a=rwx dist/packages/linting-tools/alex/.alexrc
      - name: Add permissions to alex ignore file
        run: chmod a=rwx dist/packages/linting-tools/alex/.alexignore

      - name: Add permissions to linting-tools package.json file
        run: chmod a=rwx packages/linting-tools/package.json
      - name: Add permissions to git-tools package.json file
        run: chmod a=rwx packages/git-tools/package.json
      - name: Add permissions to workspace-tools package.json file
        run: chmod a=rwx packages/workspace-tools/package.json
      - name: Add permissions to create-storm-workspace package.json file
        run: chmod a=rwx packages/create-storm-workspace/package.json

      - name: Add permissions to linting-tools distribution package.json file
        run: chmod a=rwx dist/packages/linting-tools/package.json
      - name: Add permissions to git-tools distribution package.json file
        run: chmod a=rwx dist/packages/git-tools/package.json
      - name: Add permissions to workspace-tools distribution package.json file
        run: chmod a=rwx dist/packages/workspace-tools/package.json
      - name:
          Add permissions to create-storm-workspace distribution package.json
          file
        run: chmod a=rwx dist/packages/create-storm-workspace/package.json

      - name: Add permissions to git tools
        run: chmod a=rwx dist/packages/git-tools/bin/git.js

      - name: Release Library Version Updates
        run: pnpm release --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          GH_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ secrets.STORM_BOT_NPM_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.STORM_BOT_CARGO_TOKEN }}
          STORM_BOT: Stormie-Bot
          STORM_WORKSPACE_ROOT: ${{ github.workspace }}
          STORM_REPOSITORY: ${{ github.repositoryUrl }}
          TAG: ${{ inputs.tag }}

  success:
    needs:
      - process
    if: ${{ success() }}
    name: Send success notification
    runs-on: ubuntu-latest
    steps:
      - name: Send notification - Deployment successful
        uses: storm-software/action-notify@main
        with:
          title: "Deployment for ${{ github.repository }} has finished (Success)"
          subtitle: "Deployment for ${{ github.repository }} has finished successfully - #${{ github.run_number }}"
          description: "Deployment for ${{ github.repository }} has finished successfully - #${{ github.run_number }}. Click here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}."
          color: 556891
          status: "Success"
          slack-token: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
          telegram-token: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          telegram-chat: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}
          discord-webhook: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK}}

  failure:
    needs:
      - process
    if: ${{ failure() }}
    name: Send failure notification
    runs-on: ubuntu-latest
    steps:
      - name: Send notification - Deployment successful
        uses: storm-software/action-notify@main
        with:
          title: "Deployment for ${{ github.repository }} has finished (Failure)"
          subtitle: "Deployment for ${{ github.repository }} finished with failures - #${{ github.run_number }}"
          description: "Deployment for ${{ github.repository }} finished with failures - #${{ github.run_number }}. Click here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}."
          color: 10027008
          status: "Failure"
          slack-token: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
          telegram-token: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          telegram-chat: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}
          discord-webhook: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK}}

  cancelled:
    needs:
      - process
    if: ${{ cancelled() }}
    name: Send cancelled notification
    runs-on: ubuntu-latest
    steps:
      - name: Send notification - Deployment cancelled
        uses: storm-software/action-notify@main
        with:
          title: "Deployment for ${{ github.repository }} has finished (Cancelled)"
          subtitle: "Deployment for ${{ github.repository }} was cancelled - #${{ github.run_number }}"
          description: "Deployment for ${{ github.repository }} was stopped before it could complete - #${{ github.run_number }}. Click here to see the full workflow details: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}."
          color: 16565273
          status: "Cancelled"
          slack-token: ${{ secrets.STORM_BOT_SLACK_TOKEN }}
          telegram-token: ${{ secrets.STORM_BOT_TELEGRAM_TOKEN }}
          telegram-chat: ${{ secrets.STORM_BOT_TELEGRAM_NOTIFICATION_CHAT }}
          discord-webhook: ${{ secrets.STORM_BOT_DISCORD_WEBHOOK}}
