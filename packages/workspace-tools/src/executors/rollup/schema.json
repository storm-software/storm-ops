{
  "$schema": "https://json-schema.org/schema",
  "$id": "rollup",
  "version": 2,
  "title": "Rollup Builder",
  "description": "An executor for running the Rollup build process",
  "type": "object",
  "properties": {
    "entry": {
      "type": "string",
      "description": "The path to the entry file, relative to project.",
      "alias": "main",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.ts)",
      "x-priority": "important",
      "default": "{sourceRoot}/index.ts"
    },
    "outputPath": {
      "type": "string",
      "description": "The output path of the generated files.",
      "x-completion-type": "directory",
      "x-priority": "important",
      "default": "dist/{projectRoot}"
    },
    "tsConfig": {
      "type": "string",
      "description": "The path to the `tsconfig.json` file.",
      "x-completion-type": "file",
      "x-completion-glob": "tsconfig*.json",
      "x-priority": "important",
      "default": "{projectRoot}/tsconfig.json"
    },
    "project": {
      "type": "string",
      "description": "The path to package.json file.",
      "x-priority": "important"
    },
    "outputFileName": {
      "type": "string",
      "description": "Name of the main output file. Defaults same basename as 'main' file."
    },
    "clean": {
      "type": "boolean",
      "description": "Remove previous output before build.",
      "alias": "deleteOutputPath",
      "default": true
    },
    "fileLevelInput": {
      "type": "boolean",
      "description": "Should an entry point be added for each source file in the project (each file in `sourceRoot`).",
      "default": true
    },
    "allowJs": {
      "type": "boolean",
      "description": "Allow JavaScript files to be compiled.",
      "default": false
    },
    "format": {
      "type": "array",
      "description": "List of module formats to output. Defaults to matching format from tsconfig (e.g. CJS for CommonJS, and ESM otherwise).",
      "alias": "f",
      "items": {
        "type": "string",
        "enum": ["esm", "cjs"]
      }
    },
    "external": {
      "type": "array",
      "description": "A list of external modules that will not be bundled (`react`, `react-dom`, etc.). Can also be set to `all` (bundle nothing) or `none` (bundle everything).",
      "oneOf": [
        {
          "type": "string",
          "enum": ["all", "none"]
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "watch": {
      "type": "boolean",
      "description": "Enable re-building when files change.",
      "default": false
    },
    "rollupConfig": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string",
            "x-completion-type": "file",
            "x-completion-glob": "rollup?(*)@(.js|.ts)"
          }
        },
        {
          "type": "string",
          "x-completion-type": "file",
          "x-completion-glob": "rollup?(*)@(.js|.ts)"
        }
      ],
      "description": "Path to a function which takes a rollup config and returns an updated rollup config."
    },
    "extractCss": {
      "type": ["boolean", "string"],
      "description": "CSS files will be extracted to the output folder. Alternatively custom filename can be provided (e.g. styles.css)",
      "default": true
    },
    "assets": {
      "type": "array",
      "description": "List of static assets.",
      "default": [],
      "items": {
        "$ref": "#/definitions/assetPattern"
      }
    },
    "compiler": {
      "type": "string",
      "enum": ["babel", "swc", "tsc"],
      "default": "babel",
      "description": "Which compiler to use."
    },
    "babelUpwardRootMode": {
      "type": "boolean",
      "description": "Whether to set rootmode to upward. See https://babeljs.io/docs/en/options#rootmode",
      "default": true
    },
    "javascriptEnabled": {
      "type": "boolean",
      "description": "Sets `javascriptEnabled` option for less loader",
      "default": false
    },
    "generateExportsField": {
      "type": "boolean",
      "alias": "exports",
      "description": "Update the output package.json file's 'exports' field. This field is used by Node and bundles.",
      "default": true,
      "x-priority": "important"
    },
    "additionalEntryPoints": {
      "type": "array",
      "description": "Additional entry-points to add to exports field in the package.json file.",
      "items": {
        "type": "string"
      },
      "x-priority": "important"
    },
    "skipTypeCheck": {
      "type": "boolean",
      "description": "Whether to skip TypeScript type checking.",
      "default": false
    },
    "skipTypeField": {
      "type": "boolean",
      "description": "Prevents 'type' field from being added to compiled package.json file. Use this if you are having an issue with this field.",
      "default": false
    },
    "sourceMap": {
      "description": "Output sourcemaps.",
      "type": "boolean"
    }
  },
  "required": ["tsConfig", "entry", "outputPath"],
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "The pattern to match."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply `glob`. Defaults to the project root."
            },
            "output": {
              "type": "string",
              "description": "Relative path within the output folder."
            }
          },
          "additionalProperties": false,
          "required": ["glob", "input", "output"]
        },
        {
          "type": "string"
        }
      ]
    }
  },
  "examplesFile": "../../../docs/executors/rollup.md"
}
